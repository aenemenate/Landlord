<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SadConsole</name>
    </assembly>
    <members>
        <member name="T:SadConsole.Algorithms">
            <summary>
            The Bresenham algorithm collection
            </summary>
        </member>
        <member name="M:SadConsole.Algorithms.Swap``1(``0@,``0@)">
            <summary>
            Swaps two references.
            </summary>
            <typeparam name="T">The type being swapped.</typeparam>
            <param name="lhs">Left value.</param>
            <param name="rhs">Right value.</param>
        </member>
        <member name="M:SadConsole.Algorithms.Line(System.Int32,System.Int32,System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Boolean})">
            <summary>
            Plot the line from (x0, y0) to (x1, y1) using steep.
            </summary>
            <param name="x0">The start x</param>
            <param name="y0">The start y</param>
            <param name="x1">The end x</param>
            <param name="y1">The end y</param>
            <param name="plot">The plotting function (if this returns false, the algorithm stops early)</param>
        </member>
        <member name="M:SadConsole.Algorithms.Line2(System.Int32,System.Int32,System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Boolean})">
            <summary>
            Plot the line from (x0, y0) to (x1, y1) using an interpolation derived algorithm.
            </summary>
            <param name="x0">The start x</param>
            <param name="y0">The start y</param>
            <param name="x1">The end x</param>
            <param name="y1">The end y</param>
            <param name="plot">The plotting function (if this returns false, the algorithm stops early)</param>
        </member>
        <member name="M:SadConsole.Algorithms.FloodFill``1(``0,System.Func{``0,System.Boolean},System.Action{``0},System.Func{``0,SadConsole.Algorithms.NodeConnections{``0}})">
            <summary>
            Uses a 4-way fill algorithm to change items from one type to another.
            </summary>
            <typeparam name="TNode">The item type that is changed.</typeparam>
            <param name="node">The item to change.</param>
            <param name="shouldNodeChange">Determines if the node should change.</param>
            <param name="changeNode">After it is determined if the node should change, this changes the node.</param>
            <param name="getNodeConnections">Gets any other nodes connected to this node.</param>
        </member>
        <member name="M:SadConsole.Algorithms.GradientFill(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Int32,System.Int32,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.ColorGradient,System.Action{System.Int32,System.Int32,Microsoft.Xna.Framework.Color})">
            <summary>
            Processes an area and applies a gradient calculation to each part of the area.
            </summary>
            <param name="position">The center of the gradient.</param>
            <param name="strength">The width of the gradient spread.</param>
            <param name="angle">The angle to apply the gradient.</param>
            <param name="area">The area to calculate.</param>
            <param name="applyAction">The callback called for each part of the area.</param>
        </member>
        <member name="T:SadConsole.Algorithms.NodeConnections`1">
            <summary>
            Describes the 4-way connections of a node.
            </summary>
            <typeparam name="TNode">The type of object the node and its connections are.</typeparam>
        </member>
        <member name="M:SadConsole.Ansi.AnsiWriter.AnsiInterpret(System.String)">
            <summary>
            Interprets an individual ansi code.
            </summary>
            <param name="code">The ANSI.SYS code to read.</param>
        </member>
        <member name="M:SadConsole.Ansi.AnsiWriter.AnsiReadLine(System.String,System.Boolean)">
            <summary>
            Reads a line of ANSI.SYS code.
            </summary>
            <param name="line">The line to read.</param>
            <returns>Returns false when character 26 is encountered; otherwise true.</returns>
        </member>
        <member name="M:SadConsole.Ansi.AnsiWriter.ReadEntireDocument">
            <summary>
            Loads an ansi file and parses it.
            </summary>
            <param name="path">The paath to the ansi file.</param>
        </member>
        <member name="M:SadConsole.Ansi.Helpers.AnsiJustNormalColor(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns the a normal, dark, ansi color based on the ansi color provided.
            </summary>
            <param name="input">An ansi color.</param>
            <returns>The adjusted color.</returns>
            <remarks>If the color provided is not an ansi color, dark or light, the passed in color will be returned.</remarks>
        </member>
        <member name="M:SadConsole.Ansi.Helpers.AnsiAdjustColor(Microsoft.Xna.Framework.Color,System.Boolean)">
            <summary>
            Adjusts the provided color based on the <see cref="!:Attribute_Bold"/> value.
            </summary>
            <param name="input">The ansi color to adjust.</param>
            <returns>The adjusted color.</returns>
            <remarks>If the color provided is not an ansi color, dark or light, the passed in color will be returned.</remarks>
        </member>
        <member name="M:SadConsole.Ansi.Helpers.AnsiConfigurePrintColor(System.Boolean,System.Int32,SadConsole.Ansi.State)">
            <summary>
            Sets the print appearance of the cursor based on the ANSI.SYS code provided.
            </summary>
            <param name="isBackground">When true, changes the background color instead of the foreground.</param>
            <param name="code">The 0-7 color code.</param>
        </member>
        <member name="M:SadConsole.Ansi.State.#ctor">
            <summary>
            Creates a new object to track the state of the ansi cursor.
            </summary>
        </member>
        <member name="M:SadConsole.Ansi.State.AnsiCorrectPrintColor">
            <summary>
            Forces the Background of the print appearance to be the darkened color and the foreground to be bright or not based on the <see cref="!:Attribute_Bold"/> property.
            </summary>
        </member>
        <member name="M:SadConsole.Ansi.State.AnsiResetVideo">
            <summary>
            Resets all of the print appearance and ansi settings back to the default.
            </summary>
        </member>
        <member name="T:SadConsole.Cell">
            <summary>
            Represents an individual glyph on the screen with a foreground, background, and mirror effect.
            </summary>
        </member>
        <member name="F:SadConsole.Cell.Foreground">
            <summary>
            The foreground color of this cell.
            </summary>
        </member>
        <member name="F:SadConsole.Cell.Background">
            <summary>
            The background color of this cell.
            </summary>
        </member>
        <member name="F:SadConsole.Cell.Glyph">
            <summary>
            The glyph index from a font for this cell.
            </summary>
        </member>
        <member name="F:SadConsole.Cell.Mirror">
            <summary>
            The mirror effect for this cell.
            </summary>
        </member>
        <member name="F:SadConsole.Cell.IsVisible">
            <summary>
            When true, indicates this cell should be drawn.
            </summary>
        </member>
        <member name="P:SadConsole.Cell.State">
            <summary>
            A temporary state to backup and restore a cell.
            </summary>
        </member>
        <member name="M:SadConsole.Cell.#ctor">
            <summary>
            Creates a cell with a white foreground, black background, glyph 0, and no mirror effect.
            </summary>
        </member>
        <member name="M:SadConsole.Cell.#ctor(Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a cell with the specified foreground, black background, glyph 0, and no mirror effect.
            </summary>
            <param name="foreground">Foreground color.</param>
        </member>
        <member name="M:SadConsole.Cell.#ctor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a cell with the specified foreground, specified background, glyph 0, and no mirror effect.
            </summary>
            <param name="foreground">Foreground color.</param>
            <param name="background">Background color.</param>
        </member>
        <member name="M:SadConsole.Cell.#ctor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Int32)">
            <summary>
            Creates a cell with the specified foreground, background, and glyph, with no mirror effect.
            </summary>
            <param name="foreground">Foreground color.</param>
            <param name="background">Background color.</param>
            <param name="glyph">The glyph index.</param>
        </member>
        <member name="M:SadConsole.Cell.#ctor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Int32,Microsoft.Xna.Framework.Graphics.SpriteEffects)">
            <summary>
            Creates a cell with the specified foreground, background, glyph, and mirror effect.
            </summary>
            <param name="foreground">Foreground color.</param>
            <param name="background">Background color.</param>
            <param name="glyph">The glyph index.</param>
            <param name="mirror">The mirror effect.</param>
        </member>
        <member name="M:SadConsole.Cell.CopyAppearanceTo(SadConsole.Cell)">
            <summary>
            Copies the visual appearance to the specified cell. This includes foreground, background, glyph, and mirror effect.
            </summary>
            <param name="cell">The target cell to copy to.</param>
        </member>
        <member name="M:SadConsole.Cell.CopyAppearanceFrom(SadConsole.Cell)">
            <summary>
            Sets the foreground, background, glyph, and mirror effect to the same as the specified cell.
            </summary>
            <param name="cell">The target cell to copy from.</param>
        </member>
        <member name="M:SadConsole.Cell.Clear">
            <summary>
            Resets the foreground, background, glyph, and mirror effect.
            </summary>
        </member>
        <member name="M:SadConsole.Cell.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,SadConsole.Font)">
            <summary>
            Draws a single cell using the specified SpriteBatch.
            </summary>
            <param name="batch">Rendering batch.</param>
            <param name="position">Pixel position on the screen to render.</param>
            <param name="size">Rendering size of the cell.</param>
            <param name="font">Font used to draw the cell.</param>
        </member>
        <member name="M:SadConsole.Cell.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Rectangle,SadConsole.Font)">
            <summary>
            Draws a single cell using the specified SpriteBatch.
            </summary>
            <param name="batch">Rendering batch.</param>
            <param name="drawingRectangle">Where on the sreen to draw the cell, in pixels.</param>
            <param name="font">Font used to draw the cell.</param>
        </member>
        <member name="M:SadConsole.Cell.SaveState">
            <summary>
            Saves the current state of this cell to the <see cref="P:SadConsole.Cell.State"/> property.
            </summary>
        </member>
        <member name="M:SadConsole.Cell.SaveState(SadConsole.CellState@)">
            <summary>
            Saves the current state of this cell to the provided state variable.
            </summary>
        </member>
        <member name="M:SadConsole.Cell.RestoreState">
            <summary>
            Restores the state of this cell from the <see cref="P:SadConsole.Cell.State"/> property.
            </summary>
        </member>
        <member name="M:SadConsole.Cell.RestoreState(SadConsole.CellState@)">
            <summary>
            Restores the state of this cell from the <paramref name="state"/> parameter.
            </summary>
        </member>
        <member name="M:SadConsole.Cell.ClearState">
            <summary>
            Resets the <see cref="P:SadConsole.Cell.State"/> to nothing.
            </summary>
        </member>
        <member name="M:SadConsole.Cell.Clone">
            <summary>
            Returns a new cell with the same properties as this one.
            </summary>
            <returns>The new cell.</returns>
        </member>
        <member name="M:SadConsole.Cell.op_Equality(SadConsole.Cell,SadConsole.CellState)">
            <summary>
            Compares if the cell is the same as the state.
            </summary>
            <param name="left">A cell.</param>
            <param name="right">A cell state.</param>
            <returns>True when they match.</returns>
        </member>
        <member name="M:SadConsole.Cell.op_Inequality(SadConsole.Cell,SadConsole.CellState)">
            <summary>
            Compares if the cell is different from the state.
            </summary>
            <param name="left">A cell.</param>
            <param name="right">A cell state.</param>
            <returns>True when are different.</returns>
        </member>
        <member name="T:SadConsole.CellState">
            <summary>
            A cell in structure format for temporary storage.
            </summary>
        </member>
        <member name="F:SadConsole.CellState.Foreground">
            <summary>
            Foreground color of the state.
            </summary>
        </member>
        <member name="F:SadConsole.CellState.Background">
            <summary>
            Background color of the state.
            </summary>
        </member>
        <member name="F:SadConsole.CellState.Glyph">
            <summary>
            Glyph of the state.
            </summary>
        </member>
        <member name="F:SadConsole.CellState.Mirror">
            <summary>
            Mirror setting of the state.
            </summary>
        </member>
        <member name="F:SadConsole.CellState.IsVisible">
            <summary>
            Visible setting of the state.
            </summary>
        </member>
        <member name="M:SadConsole.CellState.#ctor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Int32,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Boolean)">
            <summary>
            Creates a new state with the specified colors, glyph, visiblity, and mirror settings.
            </summary>
            <param name="foreground">Foreground color.</param>
            <param name="background">Background color.</param>
            <param name="glyph">Glyph value.</param>
            <param name="mirror">Mirror setting.</param>
            <param name="isVisible">Visbility setting.</param>
        </member>
        <member name="M:SadConsole.CellState.#ctor(SadConsole.Cell)">
            <summary>
            Creates a cell state from a cell.
            </summary>
            <param name="source">The source cell to create a state from.</param>
        </member>
        <member name="T:SadConsole.ColoredGlyph">
            <summary>
            Represents a single character that has a foreground and background color.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyph.GlyphCharacter">
            <summary>
            The glyph.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyph.Glyph">
            <summary>
            Sets the glyph by index.
            </summary>
        </member>
        <member name="F:SadConsole.ColoredGlyph.Effect">
            <summary>
            The effect for the glyph.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor">
            <summary>
            Creates a new colored glyph with a white foreground, transparent background, and a glyph index of 0.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor(SadConsole.Cell)">
            <summary>
            Creates a new colored glyph based on the provided cell.
            </summary>
            <param name="cell">The cell.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyph.Clone">
            <summary>
            Creates a new copy of this cell appearance.
            </summary>
            <returns>The cloned cell appearance.</returns>
        </member>
        <member name="T:SadConsole.ColoredString">
            <summary>
            Represents a string that has foreground and background colors for each character in the string.
            </summary>
        </member>
        <member name="F:SadConsole.ColoredString.CustomProcessor">
            <summary>
            Custom processor called if any built in command is not triggerd. Signature is ("command", "sub command", existing glyphs, text surface, associated editor, command stacks).
            </summary>
        </member>
        <member name="M:SadConsole.ColoredString.Parse(System.String,System.Int32,SadConsole.Surfaces.ISurface,SadConsole.Surfaces.SurfaceEditor,SadConsole.StringParser.ParseCommandStacks)">
            <summary>
            Creates a colored string by parsing commands embedded in the string.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="surfaceIndex">Index of where this string will be printed.</param>
            <param name="surface">The surface the string will be printed to.</param>
            <param name="editor">A surface editor associated with the text surface.</param>
            <param name="initialBehaviors">Any initial defaults.</param>
            <returns></returns>
        </member>
        <member name="P:SadConsole.ColoredString.String">
            <summary>
            Gets or sets the string. When Set, the colors for each character default to the <see cref="!:SadConsole.ColoredString.Foreground"/> and <see cref="!:SadConsole.ColoredString.Background"/> property values.
            </summary>
        </member>
        <member name="F:SadConsole.ColoredString.IgnoreGlyph">
            <summary>
            When true, instructs a caller to not render the glyphs of the string.
            </summary>
        </member>
        <member name="F:SadConsole.ColoredString.IgnoreForeground">
            <summary>
            When true, instructs a caller to not render the foreground color.
            </summary>
        </member>
        <member name="F:SadConsole.ColoredString.IgnoreBackground">
            <summary>
            When true, instructs a caller to not render the background color.
            </summary>
        </member>
        <member name="F:SadConsole.ColoredString.IgnoreEffect">
            <summary>
            When true, instructs a caller to not render the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect"/>.
            </summary>
        </member>
        <member name="F:SadConsole.ColoredString.IgnoreMirror">
            <summary>
            When true, instructs a caller to not render the mirror state.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor">
            <summary>
            Default contructor.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the ColoredString class with the specified blank characters.
            </summary>
            <param name="capacity">The number of blank characters.</param>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(System.String)">
            <summary>
            Creates a new instance of the ColoredString class with the specified string value.
            </summary>
            <param name="value">The backing string.</param>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(System.String,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteEffects)">
            <summary>
            Creates a new instance of the ColoredString class with the specified string value, foreground and background colors, and a cell effect.
            </summary>
            <param name="value">The backing string.</param>
            <param name="foreground">The foreground color for each character.</param>
            <param name="background">The background color for each character.</param>
            <param name="mirror">The mirror for each character.</param>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(System.String,SadConsole.Cell)">
            <summary>
            Creates a new instance of the ColoredString class with the specified string value, foreground and background colors, and a cell effect.
            </summary>
            <param name="value">The backing string.</param>
            <param name="appearance">The appearance to use for each character.</param>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(SadConsole.ColoredGlyph[])">
            <summary>
            Combines a <see cref="T:SadConsole.ColoredGlyph"/> array into a <see cref="T:SadConsole.ColoredString"/>.
            </summary>
            <param name="glyphs">The glyphs to combine.</param>
        </member>
        <member name="M:SadConsole.ColoredString.SubString(System.Int32,System.Int32)">
            <summary>
            Returns a new <see cref="T:SadConsole.ColoredString"/> object using a substring of this instance.
            </summary>
            <param name="index">The index to copy the contents from.</param>
            <param name="count">The count of <see cref="T:SadConsole.ColoredGlyph"/> objects to copy.</param>
            <returns>A new <see cref="T:SadConsole.ColoredString"/> object.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.SetEffect(SadConsole.Effects.ICellEffect)">
            <summary>
            Applies the referenced cell effect to every character in the colored string.
            </summary>
            <param name="effect">The effect to apply.</param>
        </member>
        <member name="M:SadConsole.ColoredString.SetForeground(Microsoft.Xna.Framework.Color)">
            <summary>
            Applies the referenced color to every character foreground in the colored string.
            </summary>
            <param name="color">The color to apply.</param>
        </member>
        <member name="M:SadConsole.ColoredString.SetBackground(Microsoft.Xna.Framework.Color)">
            <summary>
            Applies the referenced color to every character background in the colored string.
            </summary>
            <param name="color">The color to apply.</param>
        </member>
        <member name="M:SadConsole.ColoredString.op_Addition(SadConsole.ColoredString,SadConsole.ColoredString)">
            <summary>
            Combines two ColoredString objects into a single ColoredString object. Ignore* values are only copied when both strings Ignore* values match.
            </summary>
            <param name="string1">The left-side of the string.</param>
            <param name="string2">The right-side of the string.</param>
            <returns></returns>
        </member>
        <member name="T:SadConsole.ConsoleStack">
            <summary>
            A stack of consoles. The top-most of the stack is considered active and represented by the <see cref="P:SadConsole.ConsoleStack.Console"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.ConsoleStack.Console">
            <summary>
            Gets the current active console.
            </summary>
        </member>
        <member name="F:SadConsole.ConsoleStack.consoles">
            <summary>
            The stack of consoles for input processing.
            </summary>
        </member>
        <member name="M:SadConsole.ConsoleStack.Clear">
            <summary>
            Clears all consoles from the active stack along with the current active console.
            </summary>
        </member>
        <member name="M:SadConsole.ConsoleStack.Push(SadConsole.IConsole)">
            <summary>
            Adds another console to active stack, setting it as the active (top most in the stack) console.
            </summary>
            <param name="console"></param>
        </member>
        <member name="M:SadConsole.ConsoleStack.Set(SadConsole.IConsole)">
            <summary>
            Replaces the top console (active console) with the provided instance. Sets <see cref="P:SadConsole.ConsoleStack.Console"/> to this instance.
            </summary>
            <param name="console">The console to make active.</param>
        </member>
        <member name="M:SadConsole.ConsoleStack.Pop(SadConsole.IConsole)">
            <summary>
            Removes the console from the active stack. If the instance is the current active console, the active console is set to the last console in the previous console.
            </summary>
            <param name="console">The console to remove.</param>
        </member>
        <member name="T:SadConsole.Console">
            <summary>
            Represents a traditional console that implements mouse and keyboard handling as well as a cursor.
            </summary>
        </member>
        <member name="T:SadConsole.Console.ActiveBehavior">
            <summary>
            How the console handles becoming <see cref="!:Global.InputTargets.Console"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Console.ActiveBehavior.Set">
            <summary>
            Becomes the only active input object when focused.
            </summary>
        </member>
        <member name="F:SadConsole.Console.ActiveBehavior.Push">
            <summary>
            Pushes to the top of the stack when it becomes the active input object.
            </summary>
        </member>
        <member name="F:SadConsole.Console.calculatedPosition">
            <summary>
            The position the console will draw the text surface.
            </summary>
        </member>
        <member name="E:SadConsole.Console.MouseButtonClicked">
            <summary>
            Raised when the a mosue button is clicked on this console.
            </summary>
        </member>
        <member name="E:SadConsole.Console.MouseMove">
            <summary>
            Raised when the mouse moves around the this console.
            </summary>
        </member>
        <member name="E:SadConsole.Console.MouseExit">
            <summary>
            Raised when the mouse exits this console.
            </summary>
        </member>
        <member name="E:SadConsole.Console.MouseEnter">
            <summary>
            Raised when the mouse enters this console.
            </summary>
        </member>
        <member name="F:SadConsole.Console._renderer">
            <summary>
            The renderer used to draw the <see cref="P:SadConsole.Console.TextSurface"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Console.position">
            <summary>
            Where the console should be located on the screen.
            </summary>
        </member>
        <member name="F:SadConsole.Console.isVisible">
            <summary>
            Indicates the console is visible.
            </summary>
        </member>
        <member name="F:SadConsole.Console.parentConsole">
            <summary>
            The parent console.
            </summary>
        </member>
        <member name="F:SadConsole.Console.isMouseOver">
            <summary>
            Indicates that the mouse is currently over this console.
            </summary>
        </member>
        <member name="F:SadConsole.Console.virtualCursor">
            <summary>
            The private virtual curser reference.
            </summary>
        </member>
        <member name="P:SadConsole.Console.AutoCursorOnFocus">
            <summary>
            Toggles the VirtualCursor as visible\hidden when the console if focused\unfocused.
            </summary>
        </member>
        <member name="P:SadConsole.Console.VirtualCursor">
            <summary>
            Represents a _virtualCursor that can be used to input information into the console.
            </summary>
        </member>
        <member name="P:SadConsole.Console.Children">
            <summary>
            Children objects related to this one.
            </summary>
        </member>
        <member name="P:SadConsole.Console.IsMouseOver">
            <summary>
            Indicates that the mouse is currently over this console.
            </summary>
        </member>
        <member name="P:SadConsole.Console.Parent">
            <summary>
            Gets or sets the Parent console.
            </summary>
        </member>
        <member name="P:SadConsole.Console.MoveToFrontOnMouseClick">
            <summary>
            When true, this console will move to the front of its parent console when the mouse is clicked.
            </summary>
        </member>
        <member name="P:SadConsole.Console.FocusOnMouseClick">
            <summary>
            When true, this console will set <see cref="P:SadConsole.Console.IsFocused"/> to true when the mouse is clicked.
            </summary>
        </member>
        <member name="P:SadConsole.Console.UseKeyboard">
            <summary>
            Allows this console to accept keyboard input.
            </summary>
        </member>
        <member name="P:SadConsole.Console.UseMouse">
            <summary>
            Allows this console to accept mouse input.
            </summary>
        </member>
        <member name="P:SadConsole.Console.IsVisible">
            <summary>
            Indicates whether or not this console is visible.
            </summary>
        </member>
        <member name="P:SadConsole.Console.IsPaused">
            <summary>
            Indicates the screen object should not process <see cref="M:SadConsole.Console.Update(System.TimeSpan)"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Console.Renderer">
            <summary>
            The renderer used to draw <see cref="P:SadConsole.Console.TextSurface"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Console.TextSurface">
            <summary>
            The text surface to be rendered or changed.
            </summary>
        </member>
        <member name="P:SadConsole.Console.Position">
            <summary>
            Gets or sets the position to render the cells.
            </summary>
        </member>
        <member name="P:SadConsole.Console.CalculatedPosition">
            <summary>
            The position of this screen relative to the parents.
            </summary>
        </member>
        <member name="P:SadConsole.Console.FocusedMode">
            <summary>
            How the console should handle becoming active.
            </summary>
        </member>
        <member name="P:SadConsole.Console.IsFocused">
            <summary>
            Gets or sets this console as the <see cref="!:Global.InputTargets.Console"/> value.
            </summary>
            <remarks>If the <see cref="!:Console.ActiveConsoles.Console"/> has the <see cref="!:Console.ExclusiveFocus"/> property set to true, you cannot use this property to set this console to focused.</remarks>
        </member>
        <member name="P:SadConsole.Console.IsExclusiveMouse">
            <summary>
            Gets or sets whether or not this console has exclusive access to the mouse events.
            </summary>
        </member>
        <member name="P:SadConsole.Console.MouseHandler">
            <summary>
            An alternative method handler for handling the mouse logic.
            </summary>
        </member>
        <member name="P:SadConsole.Console.KeyboardHandler">
            <summary>
            An alternative method handler for handling the keyboard logic.
            </summary>
        </member>
        <member name="P:SadConsole.Console.UsePixelPositioning">
            <summary>
            Treats the <see cref="P:SadConsole.Console.Position"/> of the console as if it is pixels and not cells.
            </summary>
        </member>
        <member name="M:SadConsole.Console.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new console with the specified width and height, using the <see cref="!:Engine.DefaultFont"/>.
            </summary>
            <param name="width">The width of the <see cref="!:SadConsole.Surface.TextSurface"/> that will back this console.</param>
            <param name="height">The height of the <see cref="!:SadConsole.Surface.TextSurface"/> that will back this console.</param>
        </member>
        <member name="M:SadConsole.Console.#ctor(System.Int32,System.Int32,SadConsole.Font)">
            <summary>
            Creates a new console with the specified width and height, using the specified font.
            </summary>
            <param name="width">The width of the <see cref="!:SadConsole.Surface.TextSurface"/> that will back this console.</param>
            <param name="height">The height of the <see cref="!:SadConsole.Surface.TextSurface"/> that will back this console.</param>
            <param name="font">The font to use.</param>
        </member>
        <member name="M:SadConsole.Console.#ctor(SadConsole.Surfaces.ISurface)">
            <summary>
            Wraps an existing text surface using a <see cref="!:TextSurfaceRenderer"/> to render.
            </summary>
            <param name="textData">The backing text surface.</param>
        </member>
        <member name="M:SadConsole.Console.ProcessMouse(SadConsole.Input.MouseConsoleState)">
            <summary>
            Processes the mouse.
            </summary>
            <param name="state">The mouse state related to this console.</param>
            <returns>True when the mouse is over this console and processing should stop.</returns>
        </member>
        <member name="M:SadConsole.Console.ProcessMouseNonHandler(SadConsole.Input.MouseConsoleState)">
            <summary>
            Processing the mouse ignoring the attached <see cref="P:SadConsole.Console.MouseHandler"/>.
            </summary>
            <param name="state">The mouse state related to this console.</param>
            <returns>True when the mouse is over this console and processing should stop.</returns>
        </member>
        <member name="M:SadConsole.Console.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Called by the engine to process the keyboard. If the <see cref="P:SadConsole.Console.KeyboardHandler"/> has been set, that will be called instead of this method.
            </summary>
            <param name="info">Keyboard information.</param>
            <returns>True when the keyboard had data and this console did something with it.</returns>
        </member>
        <member name="M:SadConsole.Console.OnVisibleChanged">
            <summary>
            Called when the visibility of the console changes.
            </summary>
        </member>
        <member name="M:SadConsole.Console.OnFocusLost">
            <summary>
            Called when this console's focus has been lost.
            </summary>
        </member>
        <member name="M:SadConsole.Console.OnFocused">
            <summary>
            Called when this console is focused.
            </summary>
        </member>
        <member name="M:SadConsole.Console.OnPositionChanged(Microsoft.Xna.Framework.Point)">
            <summary>
            Called when the <see cref="P:SadConsole.Console.Position" /> property changes.
            </summary>
            <param name="oldLocation">The location before the change.</param>
        </member>
        <member name="M:SadConsole.Console.OnBeforeRenderTint(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Called before the renderer applies a tint color.
            </summary>
            <param name="batch">The batch used in renderering.</param>
        </member>
        <member name="M:SadConsole.Console.OnAfterRender(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Called when the renderer renders the text view.
            </summary>
            <param name="batch">The batch used in renderering.</param>
        </member>
        <member name="M:SadConsole.Console.OnBeforeRender(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Called when the renderer renders the text view.
            </summary>
            <param name="batch">The batch used in renderering.</param>
        </member>
        <member name="M:SadConsole.Console.Update(System.TimeSpan)">
            <summary>
            Updates the cell effects and cursor. Calls Update on <see cref="P:SadConsole.Console.Children"/>.
            </summary>
            <param name="delta">Time difference for this frame (if update was called last frame).</param>
        </member>
        <member name="M:SadConsole.Console.Draw(System.TimeSpan)">
            <summary>
            The <see cref="P:SadConsole.Console.Renderer"/> will draw the <see cref="P:SadConsole.Console.TextSurface"/> and then Add a draw call to <see cref="F:SadConsole.Global.DrawCalls"/>. Calls Draw on <see cref="P:SadConsole.Console.Children"/>.
            </summary>
            <param name="delta">Time difference for this frame (if draw was called last frame).</param>
        </member>
        <member name="M:SadConsole.Console.OnParentConsoleChanged(SadConsole.IScreen,SadConsole.IScreen)">
            <summary>
            Called when the parent console changes for this console.
            </summary>
            <param name="oldParent">The previous parent.</param>
            <param name="newParent">The new parent.</param>
        </member>
        <member name="M:SadConsole.Console.OnCalculateRenderPosition">
            <summary>
            Called when the parent position changes.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SadConsole.ConsoleContainer" -->
        <member name="P:SadConsole.ConsoleContainer.IsVisible">
            <summary>
            Indicates this screen object is visible and should process <see cref="M:SadConsole.ConsoleContainer.Draw(System.TimeSpan)"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ConsoleContainer.IsPaused">
            <summary>
            Indicates the screen object should not process <see cref="M:SadConsole.ConsoleContainer.Update(System.TimeSpan)"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ConsoleContainer.Children">
            <summary>
            Child screen objects.
            </summary>
        </member>
        <member name="P:SadConsole.ConsoleContainer.Parent">
            <summary>
            Gets or sets the Parent screen.
            </summary>
        </member>
        <member name="P:SadConsole.ConsoleContainer.CalculatedPosition">
            <summary>
            The position of this screen relative to the parents.
            </summary>
        </member>
        <member name="M:SadConsole.ConsoleContainer.Update(System.TimeSpan)">
            <summary>
            Updates the cell effects and cursor. Calls Update on <see cref="P:SadConsole.ConsoleContainer.Children"/>.
            </summary>
            <param name="delta">Time difference for this frame (if update was called last frame).</param>
        </member>
        <member name="M:SadConsole.ConsoleContainer.Draw(System.TimeSpan)">
            <summary>
            The <see cref="!:Renderer"/> will draw the <see cref="P:SadConsole.ConsoleContainer.TextSurface"/> and then Add a draw call to <see cref="F:SadConsole.Global.DrawCalls"/>. Calls Draw on <see cref="P:SadConsole.ConsoleContainer.Children"/>.
            </summary>
            <param name="delta">Time difference for this frame (if draw was called last frame).</param>
        </member>
        <member name="M:SadConsole.ConsoleContainer.OnCalculateRenderPosition">
            <summary>
            Called when the parent position changes.
            </summary>
        </member>
        <member name="T:SadConsole.ControlsConsole">
            <summary>
            A basic console that can contain controls.
            </summary>
        </member>
        <member name="F:SadConsole.ControlsConsole.KeyboardState">
            <summary>
            Keyboard processor shared by all Controls Consoles.
            </summary>
        </member>
        <member name="F:SadConsole.ControlsConsole.UseGlobalKeyboardInput">
            <summary>
            When set to false, uses the static <see cref="F:SadConsole.ControlsConsole.KeyboardState"/> keyboard instead of <see cref="F:SadConsole.Global.KeyboardState"/>
            </summary>
        </member>
        <member name="P:SadConsole.ControlsConsole.Theme">
            <summary>
            Gets or sets the theme of the window.
            </summary>
        </member>
        <member name="P:SadConsole.ControlsConsole.Controls">
            <summary>
            Gets a read-only collection of the controls this console contains.
            </summary>
        </member>
        <member name="P:SadConsole.ControlsConsole.CapturedControl">
            <summary>
            Gets the control currently capturing mouse events.
            </summary>
        </member>
        <member name="P:SadConsole.ControlsConsole.FocusedControl">
            <summary>
            Gets or sets the control that has keyboard focus.
            </summary>
        </member>
        <member name="P:SadConsole.ControlsConsole.CanTabToNextConsole">
            <summary>
            When true, allows the tab command to move to the next console (when there is a parent) instead of cycling back to the first control on this console.
            </summary>
        </member>
        <member name="P:SadConsole.ControlsConsole.NextTabConsole">
            <summary>
            Sets reference to the console to tab to when the <see cref="P:SadConsole.ControlsConsole.CanTabToNextConsole"/> property is true. Set this to null to allow the engine to determine the next console.
            </summary>
        </member>
        <member name="P:SadConsole.ControlsConsole.PreviousTabConsole">
            <summary>
            Sets reference to the console to tab to when the <see cref="P:SadConsole.ControlsConsole.CanTabToNextConsole"/> property is true. Set this to null to allow the engine to determine the next console.
            </summary>
        </member>
        <member name="P:SadConsole.ControlsConsole.DisableControlFocusing">
            <summary>
            When set to true, child controls are not alerted to (non-)focused states.
            </summary>
        </member>
        <member name="M:SadConsole.ControlsConsole.#ctor(System.Int32,System.Int32)">
            <summary>
             Creates a new instance of the controls console with the specified width and height.
            </summary>
            <param name="width">The width of the console.</param>
            <param name="height">The height of the console.</param>
            <param name="device">The graphics device to render this console on.</param>
        </member>
        <member name="M:SadConsole.ControlsConsole.ControlChanged(SadConsole.Controls.ControlBase)">
            <summary>
            Marks the text surface as dirty when a control changes appearance.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:SadConsole.ControlsConsole.Add(SadConsole.Controls.ControlBase)">
            <summary>
            Adds an existing control to this console.
            </summary>
            <param name="control">The control to add.</param>
        </member>
        <member name="M:SadConsole.ControlsConsole.Remove(SadConsole.Controls.ControlBase)">
            <summary>
            Removes a control from this console.
            </summary>
            <param name="control">The control to remove.</param>
        </member>
        <member name="M:SadConsole.ControlsConsole.TabNextControl">
            <summary>
            Gives the focus to the next control in the tab order.
            </summary>
        </member>
        <member name="M:SadConsole.ControlsConsole.TabPreviousControl">
            <summary>
            Gives focus to the previous control in the tab order.
            </summary>
        </member>
        <member name="M:SadConsole.ControlsConsole.RemoveAll">
            <summary>
            Removes all controls from this console.
            </summary>
        </member>
        <member name="M:SadConsole.ControlsConsole.Contains(SadConsole.Controls.ControlBase)">
            <summary>
            Checks if the specified control exists in this console.
            </summary>
            <param name="control">The control to check.</param>
            <returns>True when the control exists in this console; otherwise false.</returns>
        </member>
        <member name="M:SadConsole.ControlsConsole.FocusedControlChanging(SadConsole.Controls.ControlBase,SadConsole.Controls.ControlBase)">
            <summary>
            When overridden, allows you to prevent a control from taking focus from another control.
            </summary>
            <param name="newControl">The control requesting focus.</param>
            <param name="oldControl">The control that has focus.</param>
            <returns>True when the focus change is allowed; otherwise false.</returns>
        </member>
        <member name="M:SadConsole.ControlsConsole.FocusedControlChanged(SadConsole.Controls.ControlBase,SadConsole.Controls.ControlBase)">
            <summary>
            This method is called when a control gains focus. Unless overridden, this method calls the DetermineAppearance method both the <paramref name="newControl"/> and <paramref name="oldControl"/> parameters.
            </summary>
            <param name="newControl">The control that has focus.</param>
            <param name="oldControl">The control that previously had focus.</param>
        </member>
        <member name="M:SadConsole.ControlsConsole.ReOrderControls">
            <summary>
            Reorders the control collection based on the tab index of each control.
            </summary>
        </member>
        <member name="M:SadConsole.ControlsConsole.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Processes the keyboard for the console.
            </summary>
            <param name="info">Keyboard information sent by the engine.</param>
        </member>
        <member name="M:SadConsole.ControlsConsole.ProcessMouse(SadConsole.Input.MouseConsoleState)">
            <summary>
            Processes the mouse for the console.
            </summary>
            <param name="state">Mouse information sent by the engine.</param>
            <returns>True when the mouse is over this console and it is the active console; otherwise false.</returns>
        </member>
        <member name="M:SadConsole.ControlsConsole.CaptureControl(SadConsole.Controls.ControlBase)">
            <summary>
            Captures a control for exclusive mouse focus. Sets the ExclusiveMouse property to true.
            </summary>
            <param name="control">The control to capture</param>
        </member>
        <member name="M:SadConsole.ControlsConsole.ReleaseControl">
            <summary>
            Releases the control from exclusive mouse focus. Sets the ExclusiveMouse property to false and sets the CapturedControl property to null.
            </summary>
        </member>
        <member name="M:SadConsole.ControlsConsole.GetEnumerator">
            <summary>
            Gets an enumerator of the controls collection.
            </summary>
            <returns>The enumerator of the controls collection.</returns>
        </member>
        <member name="M:SadConsole.ControlsConsole.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator of the controls collection.
            </summary>
            <returns>The enumerator of the controls collection.</returns>
        </member>
        <member name="M:SadConsole.ControlsConsole.Update(System.TimeSpan)">
            <summary>
            Calls the Update method of the base class and then Update on each control.
            </summary>
        </member>
        <member name="E:SadConsole.Window.Closed">
            <summary>
            Raised when the window is closed.
            </summary>
        </member>
        <member name="P:SadConsole.Window.IsModal">
            <summary>
            Gets the whether or not the console is being shown as modal. 
            </summary>
        </member>
        <member name="P:SadConsole.Window.Border">
            <summary>
            The <see cref="T:SadConsole.Shapes.Box"/> object used to draw the window border.
            </summary>
        </member>
        <member name="P:SadConsole.Window.IsDirty">
            <summary>
            When true, indiciates that the window should be redrawn.
            </summary>
        </member>
        <member name="P:SadConsole.Window.Dragable">
            <summary>
            Gets or sets whether or not this window can be moved with the mouse.
            </summary>
        </member>
        <member name="P:SadConsole.Window.CloseOnESC">
            <summary>
            Gets or sets whether or not this window can be closed when the escape key is pressed.
            </summary>
        </member>
        <member name="P:SadConsole.Window.DialogResult">
            <summary>
            Gets or set the dialog result status of the window.
            </summary>
        </member>
        <member name="P:SadConsole.Window.ModalIsDefault">
            <summary>
            Indicates that when this window is shown by the <see cref="M:SadConsole.Window.Show"/> method or by setting the <see cref="!:_isVisible"/> property to true, the window will be shown as modal.
            </summary>
        </member>
        <member name="P:SadConsole.Window.TitleAlignment">
            <summary>
            Gets or sets the alignment of the window title.
            </summary>
        </member>
        <member name="P:SadConsole.Window.Title">
            <summary>
            Gets or sets the title displayed on the window.
            </summary>
        </member>
        <member name="P:SadConsole.Window.Theme">
            <summary>
            Gets or sets the theme of the window.
            </summary>
        </member>
        <member name="M:SadConsole.Window.ProcessMouse(SadConsole.Input.MouseConsoleState)">
            <summary>
            Processes the mouse. If allowed, will move the console around with the mouse.
            </summary>
            <param name="state">The mouse state.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Window.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Processes the keyboard looking for the ESC key press to close the console, if required. Otherwise the base ControlsConsole will process the keyboard.
            </summary>
            <param name="info">Keyboard state.</param>
        </member>
        <member name="M:SadConsole.Window.Show">
            <summary>
            Displays this window using the modal value of the <see cref="P:SadConsole.Window.ModalIsDefault"/> property.
            </summary>
        </member>
        <member name="M:SadConsole.Window.Show(System.Boolean)">
            <summary>
            Displays this window.
            </summary>
            <param name="modal">When true, the window will be displayed as modal; otherwise false.</param>
        </member>
        <member name="M:SadConsole.Window.Hide">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="M:SadConsole.Window.Center">
            <summary>
            Centers the window within the bounds of <see cref="P:SadConsole.Global.RenderWidth"/> and <see cref="P:SadConsole.Global.RenderHeight"/>
            </summary>
        </member>
        <member name="M:SadConsole.Window.Redraw">
            <summary>
            Redraws the border and title of the window.
            </summary>
        </member>
        <member name="M:SadConsole.Window.Prompt(System.String,System.String,System.String,System.Action{System.Boolean})">
            <summary>
            Shows a window prompt with two buttons for the user to click.
            </summary>
            <param name="message">The text to display.</param>
            <param name="yesPrompt">The yes button's text.</param>
            <param name="noPrompt">The no button's text.</param>
            <param name="resultCallback">Callback with the yes (true) or no (false) result.</param>
        </member>
        <member name="M:SadConsole.Window.Prompt(SadConsole.ColoredString,System.String,System.String,System.Action{System.Boolean})">
            <summary>
            Shows a window prompt with two buttons for the user to click.
            </summary>
            <param name="message">The text to display. (background color is ignored)</param>
            <param name="yesPrompt">The yes button's text.</param>
            <param name="noPrompt">The no button's text.</param>
            <param name="resultCallback">Callback with the yes (true) or no (false) result.</param>
        </member>
        <member name="M:SadConsole.Window.Message(System.String,System.String,System.Action)">
            <summary>
            Displays a dialog to the user with a specific message.
            </summary>
            <param name="message">The message.</param>
            <param name="closeButtonText">The text of the dialog's close button.</param>
            <param name="closedCallback">A callback indicating the message was dismissed.</param>
        </member>
        <member name="M:SadConsole.Window.Message(SadConsole.ColoredString,System.String,System.Action)">
            <summary>
            Displays a dialog to the user with a specific message.
            </summary>
            <param name="message">The message. (background color is ignored)</param>
            <param name="closeButtonText">The text of the dialog's close button.</param>
            <param name="closedCallback">A callback indicating the message was dismissed.</param>
        </member>
        <member name="T:SadConsole.Controls.ButtonBase`1">
            <summary>
            Base class for creating a button type control.
            </summary>
            <typeparam name="TTheme"></typeparam>
        </member>
        <member name="F:SadConsole.Controls.ButtonBase`1.theme">
            <summary>
            The theme override for the button.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ButtonBase`1.defaultTheme">
            <summary>
            The default theme if a theme is not set for the button.
            </summary>
        </member>
        <member name="E:SadConsole.Controls.ButtonBase`1.Click">
            <summary>
            Raised when the button is clicked.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ButtonBase`1.isMouseDown">
            <summary>
            True when the mouse is down.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ButtonBase`1.text">
            <summary>
            The display text of the button.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ButtonBase`1.textAlignment">
            <summary>
            The alignment of the <see cref="F:SadConsole.Controls.ButtonBase`1.text"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ButtonBase`1.currentAppearance">
            <summary>
            Selected part of the theme based on the state of the control.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ButtonBase`1.Text">
            <summary>
            The text displayed on the control.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ButtonBase`1.TextAlignment">
            <summary>
            The alignment of the text, left, center, or right.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ButtonBase`1.Theme">
            <summary>
            The theme of this control. If the theme is not explicitly set, the theme is taken from the library.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.ButtonBase`1.#ctor(System.Int32,System.Int32,`0)">
            <summary>
            Creates a new button control.
            </summary>
            <param name="width">Width of the button.</param>
            <param name="height">Height of the button.</param>
            <param name="defaultTheme">The default theme, cannot be null.</param>
        </member>
        <member name="M:SadConsole.Controls.ButtonBase`1.DoClick">
            <summary>
            Raises the <see cref="E:SadConsole.Controls.ButtonBase`1.Click"/> event.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.ButtonBase`1.DetermineAppearance">
            <summary>
            Sets the appearance of the control depending on the current state of the control.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.ButtonBase`1.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Detects if the SPACE and ENTER keys are pressed and calls the <see cref="E:SadConsole.Controls.ButtonBase`1.Click"/> method.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:SadConsole.Controls.ButtonBase`1.OnMouseIn(SadConsole.Input.MouseConsoleState)">
            <summary>
            Called when the mouse is in the control area.
            </summary>
            <param name="state">The mouse state.</param>
        </member>
        <member name="M:SadConsole.Controls.ButtonBase`1.OnMouseExit(SadConsole.Input.MouseConsoleState)">
            <summary>
            Called when the mouse leaves the control area.
            </summary>
            <param name="state">The mouse state.</param>
        </member>
        <member name="M:SadConsole.Controls.ButtonBase`1.OnLeftMouseClicked(SadConsole.Input.MouseConsoleState)">
            <summary>
            Called when the left-mouse button is clicked.
            </summary>
            <param name="state">The mouse state.</param>
        </member>
        <member name="T:SadConsole.Controls.Button">
            <summary>
            Simple button control with a height of 1.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.Button.ShowEnds">
            <summary>
            When true, renders the <see cref="P:SadConsole.Controls.Button.EndCharacterLeft"/> and <see cref="P:SadConsole.Controls.Button.EndCharacterRight"/> on the button.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.Button.EndCharacterLeft">
            <summary>
            The character on the left side of the button. Defaults to '&lt;'.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.Button.EndCharacterRight">
            <summary>
            The character on the right side of the button. Defaults to '>'.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.Button.#ctor(System.Int32)">
            <summary>
            Creates an instance of the button control with the specified width.
            </summary>
            <param name="width">Width of the control.</param>
        </member>
        <member name="M:SadConsole.Controls.Button.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an instance of the button control with the specified width.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control.</param>
        </member>
        <member name="M:SadConsole.Controls.Button.Compose">
            <summary>
            Draws the control.
            </summary>
        </member>
        <member name="T:SadConsole.Controls.CheckBox">
            <summary>
            Represents a button that can be toggled on/off within a group of other buttons.
            </summary>
        </member>
        <member name="E:SadConsole.Controls.CheckBox.IsSelectedChanged">
            <summary>
            Raised when the selected state of the radio button is changed.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.CheckBox.Theme">
            <summary>
            The theme of this control. If the theme is not explicitly set, the theme is taken from the library.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.CheckBox.Text">
            <summary>
            The text displayed on the control.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.CheckBox.TextAlignment">
            <summary>
            The alignment of the text, left, center, or right.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.CheckBox.IsSelected">
            <summary>
            Gets or sets the selected state of the radio button.
            </summary>
            <remarks>Radio buttons within the same group will set their IsSelected property to the opposite of this radio button when you set this property.</remarks>
        </member>
        <member name="M:SadConsole.Controls.CheckBox.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new radio button control with the specified width and height.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control.</param>
        </member>
        <member name="M:SadConsole.Controls.CheckBox.DetermineAppearance">
            <summary>
            Determines the appearance of the control based on its current state.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.CheckBox.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Called when the control should process keyboard information.
            </summary>
            <param name="info">The keyboard information.</param>
            <returns>True if the keyboard was handled by this control.</returns>
        </member>
        <member name="T:SadConsole.Controls.ControlBase">
            <summary>
            Base class for all controls.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.Position">
            <summary>
            Indicates he rendering location of this control.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.IsVisible">
            <summary>
            Indicates weather or not this control is visible.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.TabStop">
            <summary>
            Indicates weather or not this control can be tabbed to.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.TabIndex">
            <summary>
            Sets the tab index of this control.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.IsDirty">
            <summary>
            Indicates weather or not this control is dirty and should be redrawn.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.Name">
            <summary>
            Represents a name to identify a control by.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.FocusOnClick">
            <summary>
            Gets or sets weather or not this control will become focused when the mouse is clicked.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.IsFocused">
            <summary>
            Gets or sets weather or not this control is focused.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.IsEnabled">
            <summary>
            Gets or sets weather or not this control is enabled.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.Width">
            <summary>
            The width of the control.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.Height">
            <summary>
            The height of the control.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.Bounds">
            <summary>
            The area this control covers.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.Parent">
            <summary>
            Gets or sets the parent console of this control.
            </summary>
        </member>
        <member name="E:SadConsole.Controls.ControlBase.MouseEnter">
            <summary>
            Raised when the mouse enters this control.
            </summary>
        </member>
        <member name="E:SadConsole.Controls.ControlBase.MouseExit">
            <summary>
            Raised when the mouse exits this control.
            </summary>
        </member>
        <member name="E:SadConsole.Controls.ControlBase.MouseMove">
            <summary>
            Raised when the mouse is moved over this control.
            </summary>
        </member>
        <member name="E:SadConsole.Controls.ControlBase.MouseButtonClicked">
            <summary>
            Raised when a mouse button is clicked while the mouse is over this control.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.#ctor(System.Int32,System.Int32)">
            <summary>
            Default constructor of the control.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.FocusLost">
            <summary>
            Called when the control loses focus. Calls DetermineAppearance.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.Focused">
            <summary>
            Called when the control is focused. Calls DetermineAppearance.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Called when the keyboard is used on this control.
            </summary>
            <param name="state">The state of the keyboard.</param>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.ProcessMouse(SadConsole.Input.MouseConsoleState)">
            <summary>
            Checks if the mouse is the control and calls the appropriate mouse methods.
            </summary>
            <param name="state">Mouse information.</param>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.LostMouse(SadConsole.Input.MouseConsoleState)">
            <summary>
            Called to trigger the state of losing mouse focus.
            </summary>
            <param name="state">The mouse state.</param>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.OnParentChanged">
            <summary>
            Called when the parent property is changed.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.OnPositionChanged">
            <summary>
            Called when the control changes position.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.DetermineAppearance">
            <summary>
            Sets the appropriate theme for the control based on the current state of the control.
            </summary>
            <remarks>Called by the control as the mouse state changes, like when the mouse is clicked on top of the control or leaves the area of the control. This method is implemented by each derived control.</remarks>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.OnMouseEnter(SadConsole.Input.MouseConsoleState)">
            <summary>
            Called when the mouse first enters the control. Raises the MouseEnter event and calls the <see cref="M:SadConsole.Controls.ControlBase.DetermineAppearance"/> method.
            </summary>
            <param name="state">The current mouse data</param>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.OnMouseExit(SadConsole.Input.MouseConsoleState)">
            <summary>
            Called when the mouse exits the area of the control. Raises the MouseExit event and calls the <see cref="M:SadConsole.Controls.ControlBase.DetermineAppearance"/> method.
            </summary>
            <param name="state">The current mouse data</param>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.OnMouseIn(SadConsole.Input.MouseConsoleState)">
            <summary>
            Called as the mouse moves around the control area. Raises the MouseMove event and calls the <see cref="M:SadConsole.Controls.ControlBase.DetermineAppearance"/> method.
            </summary>
            <param name="state">The current mouse data</param>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.OnLeftMouseClicked(SadConsole.Input.MouseConsoleState)">
            <summary>
            Called when the left mouse button is clicked. Raises the MouseButtonClicked event and calls the <see cref="M:SadConsole.Controls.ControlBase.DetermineAppearance"/> method.
            </summary>
            <param name="state">The current mouse data</param>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.OnRightMouseClicked(SadConsole.Input.MouseConsoleState)">
            <summary>
            Called when the right mouse button is clicked. Raises the MouseButtonClicked event and calls the <see cref="M:SadConsole.Controls.ControlBase.DetermineAppearance"/> method.
            </summary>
            <param name="state">The current mouse data</param>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.TransformConsolePositionByControlPosition(Microsoft.Xna.Framework.Point)">
            <summary>
            Helper method that returns the mouse x,y position for the control.
            </summary>
            <param name="consolePosition">Position of the console to get the relative control position from.</param>
            <returns>The x,y position of the mouse over the control.</returns>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.Compose">
            <summary>
            Redraw the lastest appearance of the control.
            </summary>
            <remarks>This method is implemented by each derived control.</remarks>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.Compose(System.Boolean)">
            <summary>
            Redraw the latest appearance of the control if <see cref="P:SadConsole.Controls.ControlBase.IsDirty"/> is set to true.
            </summary>
            <param name="force">Force the draw to happen by setting IsDirty as true.</param>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.Update">
            <summary>
            Update the control. Calls Compose() and then updates each cell effect if needed.
            </summary>
        </member>
        <member name="T:SadConsole.Controls.DrawingSurface">
            <summary>
            A simple surface for drawing text that can be moved and sized like a control.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.DrawingSurface.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new drawing surface control with the specified width and height.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control.</param>
        </member>
        <member name="M:SadConsole.Controls.DrawingSurface.DetermineAppearance">
            <summary>
            Not used by this control.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.DrawingSurface.Compose">
            <summary>
            Not used by this control.
            </summary>
        </member>
        <member name="T:SadConsole.Controls.InputBox">
            <summary>
            InputBox control that allows text input.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.InputBox.isCarrotVisible">
            <summary>
            Indicates the carrot is visible.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.InputBox._validNumbers">
            <summary>
            A list of valid number characters
            </summary>
        </member>
        <member name="F:SadConsole.Controls.InputBox._theme">
            <summary>
            The theme of the control.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.InputBox._alignment">
            <summary>
            The alignment of the text.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.InputBox._leftDrawOffset">
            <summary>
            When editing the text box, this allows the text to scroll to the right so you can see what you are typing.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.InputBox._carrotPos">
            <summary>
            The location of the carrot.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.InputBox._text">
            <summary>
            The text value of the input box.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.InputBox._isNumeric">
            <summary>
            Indicates the input box is numeric only.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.InputBox._allowDecimalPoint">
            <summary>
            Indicates that the input box (when numeric) will accept decimal points.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.InputBox._currentAppearance">
            <summary>
            The current appearance of the control.
            </summary>
        </member>
        <member name="E:SadConsole.Controls.InputBox.TextChanged">
            <summary>
            Raised when the text has changed and the preview has accepted it.
            </summary>
        </member>
        <member name="E:SadConsole.Controls.InputBox.TextChangedPreview">
            <summary>
            Raised before the text has changed and allows the change to be cancelled.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.InputBox.DisableMouse">
            <summary>
            Disables mouse input.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.InputBox.DisableKeyboard">
            <summary>
            Disables the keyboard which turns off keyboard input and hides the cursor.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.InputBox.Theme">
            <summary>
            The theme of this control. If the theme is not explicitly set, the theme is taken from the library.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.InputBox.TextAlignment">
            <summary>
            The alignment of the carrot.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.InputBox.MaxLength">
            <summary>
            How big the text can be. Setting this to 0 will make it unlimited.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.InputBox.CarrotPosition">
            <summary>
            Gets or sets the position of the carrot in the current text.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.InputBox.Text">
            <summary>
            Gets or sets the text of the input box.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.InputBox.IsNumeric">
            <summary>
            Gets or sets weather or not this input box only allows numeric input.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.InputBox.AllowDecimal">
            <summary>
            Gets or sets weather or not this input box should restrict numeric input should allow a decimal point.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.InputBox.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the input box.
            </summary>
            <param name="width">The width of the input box.</param>
        </member>
        <member name="M:SadConsole.Controls.InputBox.Compose">
            <summary>
            Draws the control.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.InputBox.DetermineAppearance">
            <summary>
            Determines the appearance of the control based on its current state.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.InputBox.Validate">
            <summary>
            Validates that the value of the input box conforms to the settings of this control and sets the dirty flag to true.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.InputBox.PositionCursor">
            <summary>
            Correctly positions the cursor within the text.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.InputBox.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Called when the control should process keyboard information.
            </summary>
            <param name="info">The keyboard information.</param>
            <returns>True if the keyboard was handled by this control.</returns>
        </member>
        <member name="M:SadConsole.Controls.InputBox.FocusLost">
            <summary>
            Called when the control loses focus.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.InputBox.Focused">
            <summary>
            Called when the control is focused.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ListBox`1.CompareByReference">
            <summary>
            When the <see cref="P:SadConsole.Controls.ListBox`1.SelectedItem"/> changes, and this property is true, objects will be compared by reference. If false, they will be compared by value.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ListBox`1.HideBorder">
            <summary>
            When set to true, does not render the border.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ListBox`1.Theme">
            <summary>
            The theme of this control. If the theme is not explicitly set, the theme is taken from the library.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.ListBox`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the listbox control.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ListBoxItem.Theme">
            <summary>
            The theme of this control.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ListBoxItem.KeepOwnTheme">
            <summary>
            When set to true, a listbox will not override the theme with its own.
            </summary>
        </member>
        <member name="T:SadConsole.Controls.ProgressBar">
            <summary>
            A control that fills an area (vertical or horizontal) according to a value.
            </summary>
        </member>
        <member name="E:SadConsole.Controls.ProgressBar.ProgressChanged">
            <summary>
            Called when the <see cref="P:SadConsole.Controls.ProgressBar.Progress"/> property value changes.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ProgressBar.theme">
            <summary>
            Overriding theme.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ProgressBar.progressValue">
            <summary>
            The progress bar fill value. Between 0f and 1f.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ProgressBar.controlSize">
            <summary>
            The size of the bar.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ProgressBar.fillSize">
            <summary>
            The size of the bar currently filled based on the <see cref="P:SadConsole.Controls.ProgressBar.Progress"/> property.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ProgressBar.isHorizontal">
            <summary>
            Flag to indicate this bar was created horizontal.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ProgressBar.horizontalAlignment">
            <summary>
            The alignment if the bar is horizontal.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ProgressBar.verticalAlignment">
            <summary>
            The alignment if the bar is vertical.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ProgressBar.Theme">
            <summary>
            The theme of this control. If the theme is not explicitly set, the theme is taken from the library.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ProgressBar.HorizontalAlignment">
            <summary>
            The horizontal orientation used when <see cref="P:SadConsole.Controls.ProgressBar.IsHorizontal"/> is set to true.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the value is set to either <see cref="F:System.Windows.HorizontalAlignment.Center"/> or <see cref="F:System.Windows.HorizontalAlignment.Stretch"/>.</exception>
        </member>
        <member name="P:SadConsole.Controls.ProgressBar.VerticalAlignment">
            <summary>
            The vertical orientation used when <see cref="P:SadConsole.Controls.ProgressBar.IsHorizontal"/> is set to false.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the value is set to either <see cref="F:System.Windows.VerticalAlignment.Center"/> or <see cref="F:System.Windows.VerticalAlignment.Stretch"/>.</exception>
        </member>
        <member name="P:SadConsole.Controls.ProgressBar.IsHorizontal">
            <summary>
            When true, the progress bar uses the <see cref="P:SadConsole.Controls.ProgressBar.HorizontalAlignment"/> property to determine the starting fill direction. When false, uses the <see cref="P:SadConsole.Controls.ProgressBar.VerticalAlignment"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ProgressBar.Progress">
            <summary>
            Gets or sets the value of the scrollbar between the minimum and maximum values.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.ProgressBar.#ctor(System.Int32,System.Int32,System.Windows.HorizontalAlignment)">
            <summary>
            Creates a new horizontal progress bar.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control.</param>
            <param name="horizontalAlignment">Sets the control to be horizontal, starting from the specified side. Center/Stretch is invalid.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="horizontalAlignment"/> is set to either <see cref="F:System.Windows.HorizontalAlignment.Center"/> or <see cref="F:System.Windows.HorizontalAlignment.Stretch"/>.</exception>
        </member>
        <member name="M:SadConsole.Controls.ProgressBar.#ctor(System.Int32,System.Int32,System.Windows.VerticalAlignment)">
            <summary>
            Creates a new vertical progress bar.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control.</param>
            <param name="verticalAlignment">Sets the control to be vertical, starting from the specified side. Center/Stretch is invalid.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="verticalAlignment"/> is set to either <see cref="F:System.Windows.VerticalAlignment.Center"/> or <see cref="F:System.Windows.VerticalAlignment.Stretch"/>.</exception>
        </member>
        <member name="M:SadConsole.Controls.ProgressBar.DetermineAppearance">
            <summary>
            Determines the appearance of the control based on its current state.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.ProgressBar.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Called when the control should process keyboard information.
            </summary>
            <param name="info">The keyboard information.</param>
            <returns>True if the keyboard was handled by this control.</returns>
        </member>
        <member name="T:SadConsole.Controls.RadioButton">
            <summary>
            Represents a button that can be toggled on/off within a group of other buttons.
            </summary>
        </member>
        <member name="E:SadConsole.Controls.RadioButton.IsSelectedChanged">
            <summary>
            Raised when the selected state of the radio button is changed.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.RadioButton.Theme">
            <summary>
            The theme of this control. If the theme is not explicitly set, the theme is taken from the library.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.RadioButton.Text">
            <summary>
            The text displayed on the control.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.RadioButton.TextAlignment">
            <summary>
            The alignment of the text, left, center, or right.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.RadioButton.GroupName">
            <summary>
            The group of the radio button. All radio buttons with the same group name will work together to keep one radio button selected at a time.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.RadioButton.IsSelected">
            <summary>
            Gets or sets the selected state of the radio button.
            </summary>
            <remarks>Radio buttons within the same group will set their IsSelected property to the opposite of this radio button when you set this property.</remarks>
        </member>
        <member name="M:SadConsole.Controls.RadioButton.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new radio button control with the specified width and height.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control.</param>
        </member>
        <member name="M:SadConsole.Controls.RadioButton.DetermineAppearance">
            <summary>
            Determines the appearance of the control based on its current state.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.RadioButton.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Called when the control should process keyboard information.
            </summary>
            <param name="info">The keyboard information.</param>
            <returns>True if the keyboard was handled by this control.</returns>
        </member>
        <member name="T:SadConsole.Controls.ScrollBar">
            <summary>
            Represents a scrollbar control.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ScrollBar.Value">
            <summary>
            Gets or sets the value of the scrollbar between the minimum and maximum values.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ScrollBar.Maximum">
            <summary>
            Gets or sets the maximum value for the scrollbar.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ScrollBar.Step">
            <summary>
            Gets or sets the amount of values to add or substract to the <see cref="P:SadConsole.Controls.ScrollBar.Value"/> when the up or down arrows are used.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ScrollBar.Theme">
            <summary>
            The theme of this control. If the theme is not explicitly set, the theme is taken from the library.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ScrollBar.TopOrLeftCharacter">
            <summary>
            Gets or sets the character used on the top or left of the control depending on the orientation of the control when it was created.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ScrollBar.BottomOrRightCharacter">
            <summary>
            Gets or sets the character used on the bottom or right of the control depending on the orientation of the control when it was created.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ScrollBar.SliderCharacter">
            <summary>
            Gets or sets the character displayed for the slider.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ScrollBar.SliderBarCharacter">
            <summary>
            Gets or sets the character displayed for the slider bar.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.ScrollBar.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Not Used.
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:SadConsole.Controls.SelectionButton">
            <summary>
            Provides a button-like control that changes focus to a designated previous or next selection button when the arrow keys are pushed.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.SelectionButton.PreviousSelection">
            <summary>
            The selection button to focus when the UP key is pressed or the SelectPrevious() method is called.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.SelectionButton.NextSelection">
            <summary>
            The selection button to focus when the UP key is pressed or the SelectNext() method is called.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.SelectionButton.#ctor(System.Int32)">
            <summary>
            Creates a new Selection Button with a specific width and height.
            </summary>
            <param name="width">The width of the selection button.</param>
        </member>
        <member name="M:SadConsole.Controls.SelectionButton.SetNextSelection(SadConsole.Controls.SelectionButton@,System.Boolean)">
            <summary>
            Sets the next selection button and optionally sets the previous of the referenced selection to this button.
            </summary>
            <param name="nextSelection">The selection button to be used as next.</param>
            <param name="setPreviousOnNext">Sets the PreviousSelection property on the <paramref name="nextSelection"/> instance to current selection button. Defaults to true.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Controls.SelectionButton.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Focuses the previous or next selection button depending on if the UP or DOWN arrow keys were pressed.
            </summary>
            <param name="info">The keyboard state.</param>
        </member>
        <member name="M:SadConsole.Controls.SelectionButton.SelectPrevious">
            <summary>
            Selects the previous selection button.
            </summary>
            <returns>Returns the previous selection button.</returns>
        </member>
        <member name="M:SadConsole.Controls.SelectionButton.SelectNext">
            <summary>
            Selects the next selection button.
            </summary>
            <returns>Returns the next selection button.</returns>
        </member>
        <member name="P:SadConsole.Cursor.CursorRenderCell">
            <summary>
            Cell used to render the cursor on the screen.
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.PrintAppearance">
            <summary>
            Appearance used when printing text.
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.PrintEffect">
            <summary>
            This effect is applied to each cell printed by the cursor.
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.CursorEffect">
            <summary>
            This is the cursor visible effect, like blinking.
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.PrintOnlyCharacterData">
            <summary>
            When true, indicates that the cursor, when printing, should not use the <see cref="P:SadConsole.Cursor.PrintAppearance"/> property in determining the color/effect of the cell, but keep the cell the same as it was.
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.IsVisible">
            <summary>
            Shows or hides the cursor. This does not affect how the cursor operates.
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.Position">
            <summary>
            Gets or sets the location of the cursor on the console.
            </summary>
        </member>
        <member name="F:SadConsole.Cursor.DisableWordBreak">
            <summary>
            When true, prevents the <see cref="M:SadConsole.Cursor.Print(System.String)"/> method from breaking words up by spaces when wrapping lines.
            </summary>
        </member>
        <member name="F:SadConsole.Cursor.UseLinuxLineEndings">
            <summary>
            Enables linux-like string parsing where a \n behaves like a \r\n.
            </summary>
        </member>
        <member name="F:SadConsole.Cursor.UseStringParser">
            <summary>
            Calls <see cref="M:SadConsole.ColoredString.Parse(System.String,System.Int32,SadConsole.Surfaces.ISurface,SadConsole.Surfaces.SurfaceEditor,SadConsole.StringParser.ParseCommandStacks)"/> to create a colored string when using <see cref="M:SadConsole.Cursor.Print(System.String)"/> or <see cref="M:SadConsole.Cursor.Print(System.String,SadConsole.Cell,SadConsole.Effects.ICellEffect)"/>
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.Row">
            <summary>
            Gets or sets the row of the cursor postion.
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.Column">
            <summary>
            Gets or sets the column of the cursor postion.
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.AutomaticallyShiftRowsUp">
            <summary>
            Indicates that the when the cursor goes past the last cell of the console, that the rows should be shifted up when the cursor is automatically reset to the next line.
            </summary>
        </member>
        <member name="M:SadConsole.Cursor.#ctor(SadConsole.Surfaces.SurfaceEditor)">
            <summary>
            Creates a new instance of the cursor class that will work with the specified console.
            </summary>
            <param name="console">The console this cursor will print on.</param>
        </member>
        <member name="M:SadConsole.Cursor.AttachConsole(SadConsole.Surfaces.SurfaceEditor)">
            <summary>
            Sets the console this cursor is targetting.
            </summary>
            <param name="console">The console the cursor works with.</param>
        </member>
        <member name="M:SadConsole.Cursor.ResetCursorEffect">
            <summary>
            Resets the <see cref="P:SadConsole.Cursor.CursorRenderCell"/> back to the default.
            </summary>
        </member>
        <member name="M:SadConsole.Cursor.ResetAppearanceToConsole">
            <summary>
            Resets the cursor appearance to the console's default foreground and background.
            </summary>
            <returns>This cursor object.</returns>
            <exception cref="T:System.Exception">Thrown when the backing console's CellData is null.</exception>
        </member>
        <member name="M:SadConsole.Cursor.Print(System.String)">
            <summary>
            Prints text to the console using the default print appearance.
            </summary>
            <param name="text">The text to print.</param>
            <returns>Returns this cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.Print(System.String,SadConsole.Cell,SadConsole.Effects.ICellEffect)">
            <summary>
            Prints text on the console.
            </summary>
            <param name="text">The text to print.</param>
            <param name="template">The way the text will look when it is printed.</param>
            <param name="templateEffect">Effect to apply to the text as its printed.</param>
            <returns>Returns this cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.Print(SadConsole.ColoredString)">
            <summary>
            Prints text to the console using the appearance of the colored string.
            </summary>
            <param name="text">The text to print.</param>
            <returns>Returns this cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.CarriageReturn">
            <summary>
            Returns the cursor to the start of the current line.
            </summary>
            <returns>The current cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.LineFeed">
            <summary>
            Moves the cursor down a line.
            </summary>
            <returns>The current cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.NewLine">
            <summary>
            Calls the <see cref="M:CarriageReturn()"/> and <see cref="M:LineFeed()"/> methods in a single call.
            </summary>
            <returns>The current cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.Up(System.Int32)">
            <summary>
            Moves the cusor up by the specified amount of lines.
            </summary>
            <param name="amount">The amount of lines to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.Down(System.Int32)">
            <summary>
            Moves the cusor down by the specified amount of lines.
            </summary>
            <param name="amount">The amount of lines to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.Left(System.Int32)">
            <summary>
            Moves the cusor left by the specified amount of columns.
            </summary>
            <param name="amount">The amount of columns to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.LeftWrap(System.Int32)">
            <summary>
            Moves the cusor left by the specified amount of columns, wrapping the cursor if needed.
            </summary>
            <param name="amount">The amount of columns to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.Right(System.Int32)">
            <summary>
            Moves the cusor right by the specified amount of columns.
            </summary>
            <param name="amount">The amount of columns to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.RightWrap(System.Int32)">
            <summary>
            Moves the cusor right by the specified amount of columns, wrapping the cursor if needed.
            </summary>
            <param name="amount">The amount of columns to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="P:SadConsole.DoubleAnimation.EasingFunction">
            <summary>
            An easing method to apply to the value. The parameters passed in are: calculated value, starting value, ending value, and duration.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.Blink">
            <summary>
            Switches between the normal foreground of a cell and a specified color for an amount of time, and then repeats.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blink.BlinkSpeed">
            <summary>
            In seconds, how fast the fade in and fade out each are
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blink.UseCellBackgroundColor">
            <summary>
            When true, uses the current cells background color for fading instead of the value of <see cref="P:SadConsole.Effects.Blink.BlinkOutColor"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blink.BlinkOutColor">
            <summary>
            The color to fade out to.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blink.BlinkCount">
            <summary>
            How many times to blink. The value of -1 represents forever.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Blink.Restart">
            <summary>
            Restarts the cell effect but does not reset it.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.BlinkGlyph">
            <summary>
            Switches between the glyph of a cell and a specified glyph for an amount of time, and then repeats.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.BlinkGlyph.BlinkSpeed">
            <summary>
            In seconds, how fast the fade in and fade out each are
            </summary>
        </member>
        <member name="P:SadConsole.Effects.BlinkGlyph.GlyphIndex">
            <summary>
            The glyph index to blink into.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.BlinkGlyph.Restart">
            <summary>
            Restarts the cell effect but does not reset it.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.CellEffectBase">
            <summary>
            A base class for cell effects.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.CellEffectBase.KeepStateOnFinished">
            <summary>
            When true, the effect should not call <see cref="M:SadConsole.Cell.RestoreState"/> when it has finished processing.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.ConcurrentEffect">
            <summary>
            Allows more than one effect to be processed and applied to a cell at the same time.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ConcurrentEffect.Effects">
            <summary>
            The effects to be processed at the same time. Cannot be set to null.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.Delay">
            <summary>
            An effect that doesn't do anything but delays. Usually used by the ChainEffect effect.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Delay.Restart">
            <summary>
            Restarts the cell effect but does not reset it.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.EffectsChain">
            <summary>
            Chains one effect after another.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.EffectsChain.Restart">
            <summary>
            Restarts the cell effect but does not reset it.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.EffectsManager">
            <summary>
            Effects manager for a text surface.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.#ctor(SadConsole.Surfaces.ISurface)">
            <summary>
            Creates a new effects manager associated with a text surface.
            </summary>
            <param name="surface">Text surface to manage.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.SetEffect(SadConsole.Cell,SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a specific cell.
            </summary>
            <param name="cell">Cells to change the effect on.</param>
            <param name="effect">The effect to associate with the cell.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.SetEffect(System.Collections.Generic.IEnumerable{SadConsole.Cell},SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of the <paramref name="cells"/> provided.
            </summary>
            <param name="cells">Cells to change the effect on.</param>
            <param name="effect">The effect to associate with the cell.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.GetEffect(SadConsole.Cell)">
            <summary>
            Gets the effect of the specified cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The effect.</returns>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.Remove(SadConsole.Effects.ICellEffect)">
            <summary>
            Removes an effect and associated cells from the manager.
            </summary>
            <param name="effect">Effect to remove.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.RemoveAll">
            <summary>
            Removes all effects and associated cells.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.UpdateEffects(System.Double)">
            <summary>
            Updates all known effects and applies them to their associated cells.
            </summary>
            <param name="timeElapsed">The time elapased since the last update.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.Save(System.String)">
            <summary>
            Saves the effects and the associated cell indexes from the backing surface.
            </summary>
            <param name="file">The file to save the effects to.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.Load(System.String,SadConsole.Surfaces.ISurface)">
            <summary>
            Loads effects from a file.
            </summary>
            <param name="file">The file to load from.</param>
            <param name="backingSurface">The surface the effects were originally (or will be) associated with.</param>
            <returns></returns>
        </member>
        <member name="T:SadConsole.Effects.EffectsManager.CellEffectData">
            <summary>
            Represents a mapping of a single effect and associated cells.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.Fade">
            <summary>
            Fades both the background and foreground to seperate colors.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.DestinationBackground">
            <summary>
            Gets or sets the color gradient used to fade for the cell background.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.DestinationForeground">
            <summary>
            Gets or sets the color gradient used to fade for the cell background.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.FadeDuration">
            <summary>
            Gets or sets how long the fade takes to complete in seconds.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.Repeat">
            <summary>
            Gets or sets a value to indicate that the fade effect should repeat.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.UseCellForeground">
            <summary>
            Gets or sets a value to indicate that the color gradient used with the <see cref="P:SadConsole.Effects.Fade.DestinationForeground"/> should replace its first color stop with the cell's foreground color.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.UseCellBackground">
            <summary>
            Gets or sets a value to indicate that the color gradient used with the <see cref="P:SadConsole.Effects.Fade.DestinationBackground"/> should replace its first color stop with the cell's background color.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.FadeForeground">
            <summary>
            Gets or sets a value to indicate that the fade effect should use the foreground color on the cell's foreground.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.FadeBackground">
            <summary>
            Gets or sets a value to indicate that the fade effect should use the background color on the cell's background.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.AutoReverse">
            <summary>
            Gets or sets a value to indicate that the fade effect should automatically reverse itself when it finishes going up the color spectrum. By setting this to true, and setting the <see cref="P:SadConsole.Effects.Fade.Repeat"/> property to true, you can create a pulse effect.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.UseCellDestinationReverse">
            <summary>
            When <see cref="P:SadConsole.Effects.Fade.UseCellForeground"/> or <see cref="P:SadConsole.Effects.Fade.UseCellBackground"/> is set, and this is true, the last color in the fade will be set to the cell instead of the first.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Fade.Restart">
            <summary>
            Restarts the cell effect but does not reset it.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.ICellEffect">
            <summary>
            The interface describing a cell effect
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.IsFinished">
            <summary>
            True when the effect is finished but attached to the cell.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.CloneOnApply">
            <summary>
            Flags this effect to be cloned when applied to a cell instead of reused.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.StartDelay">
            <summary>
            A delay applied to the effect only when it first runs.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.RemoveOnFinished">
            <summary>
            When true, the effect should be disassociated with cells when it has finished processing.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.KeepStateOnFinished">
            <summary>
            When true, the effect should not call <see cref="M:SadConsole.Cell.RestoreState"/> when it has finished processing.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.Permanent">
            <summary>
            When true, indicates the effect this effect has on a cell should remain after this effect is cleared from the cell.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.ICellEffect.Apply(SadConsole.Cell)">
            <summary>
            Applies the state of the effect to a cell.
            </summary>
            <param name="callingCell">The console cell using this effect.</param>
        </member>
        <member name="M:SadConsole.Effects.ICellEffect.Update(System.Double)">
            <summary>
            Updates the state of the effect.
            </summary>
            <param name="gameTimeSeconds">Time since the last call to this effect.</param>
        </member>
        <member name="M:SadConsole.Effects.ICellEffect.Clear(SadConsole.Cell)">
            <summary>
            Clears the effect from the cell.
            </summary>
            <param name="cell">The console cell that will no longer use this effect.</param>
        </member>
        <member name="M:SadConsole.Effects.ICellEffect.Restart">
            <summary>
            Restarts the cell effect but does not reset it.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.ICellEffect.Clone">
            <summary>
            Returns a duplicate of this effect.
            </summary>
            <returns>A new copy of this effect.</returns>
        </member>
        <member name="T:SadConsole.Effects.Recolor">
            <summary>
            Recors the foreground or the background of a cell.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Recolor.Foreground">
            <summary>
            The foreground color applied to a cell.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Recolor.Background">
            <summary>
            The background color applied to a cell.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Recolor.DoForeground">
            <summary>
            When true, the <see cref="P:SadConsole.Effects.Recolor.Foreground"/> color will be applied to the cell.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Recolor.DoBackground">
            <summary>
            /// When true, the <see cref="P:SadConsole.Effects.Recolor.Background"/> color will be applied to the cell.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Recolor.Restart">
            <summary>
            Restarts the cell effect but does not reset it.
            </summary>
        </member>
        <member name="M:SadConsole.ISurfaceExtensions.IsValidCell(SadConsole.Surfaces.ISurface,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tests if a cell is valid based on its x,y position.
            </summary>
            <param name="surface">The surface to check.</param>
            <param name="x">The x coordinate of the cell to test.</param>
            <param name="y">The y coordinate of the cell to test.</param>
            <param name="index">If the cell is valid, the index of the cell when found.</param>
            <returns>A true value indicating the cell by x,y does exist in this cell surface.</returns>
        </member>
        <member name="M:SadConsole.ISurfaceExtensions.IsValidCell(SadConsole.Surfaces.ISurface,System.Int32,System.Int32)">
            <summary>
            Tests if a cell is valid based on its x,y position.
            </summary>
            <param name="surface">The surface to check.</param>
            <param name="x">The x coordinate of the cell to test.</param>
            <param name="y">The y coordinate of the cell to test.</param>
            <returns>A true value indicating the cell by x,y does exist in this cell surface.</returns>
        </member>
        <member name="M:SadConsole.ISurfaceExtensions.GetCell(SadConsole.Surfaces.ISurface,System.Int32,System.Int32)">
            <summary>
            Gets a cell based on it's coordinates on the surface.
            </summary>
            <param name="surface">The surface to check.</param>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <returns>The indicated cell.</returns>
        </member>
        <member name="M:SadConsole.ISurfaceExtensions.GetIndexFromPoint(SadConsole.Surfaces.ISurface,Microsoft.Xna.Framework.Point)">
            <summary>
            Gets the index of a location on the surface by point.
            </summary>
            <param name="surface">The surface to check.</param>
            <param name="location">The location of the index to get.</param>
            <returns>The cell index.</returns>
        </member>
        <member name="M:SadConsole.ISurfaceExtensions.GetIndexFromPoint(SadConsole.Surfaces.ISurface,System.Int32,System.Int32)">
            <summary>
            Gets the index of a location on the surface by coordinate.
            </summary>
            <param name="surface">The surface to check.</param>
            <param name="x">The x of the location.</param>
            <param name="y">The y of the location.</param>
            <returns>The cell index.</returns>
        </member>
        <member name="M:SadConsole.ISurfaceExtensions.GetPointFromIndex(SadConsole.Surfaces.ISurface,System.Int32)">
            <summary>
            Gets the x,y of an index on the surface.
            </summary>
            <param name="surface">The surface to check.</param>
            <param name="index">The index to get.</param>
            <returns>The x,y as a <see cref="T:Microsoft.Xna.Framework.Point"/>.</returns>
        </member>
        <member name="M:SadConsole.ISurfaceExtensions.Copy(SadConsole.Surfaces.ISurface,SadConsole.Surfaces.ISurface)">
            <summary>
            Copies the contents of the cell surface to the destination.
            </summary>
            <remarks>If the sizes to not match, it will always start at 0,0 and work with what it can and move on to the next row when either surface runs out of columns being processed</remarks>
            <param name="source">The source surface</param>
            <param name="destination">The destination surface.</param>
        </member>
        <member name="M:SadConsole.ISurfaceExtensions.Copy(SadConsole.Surfaces.ISurface,SadConsole.Surfaces.ISurface,System.Int32,System.Int32)">
            <summary>
            Copies the contents of the cell surface to the destination at the specified x,y.
            </summary>
            <param name="x">The x coordinate of the destination.</param>
            <param name="y">The y coordinate of the destination.</param>
            <param name="source">The source surface</param>
            <param name="destination">The destination surface.</param>
        </member>
        <member name="M:SadConsole.ISurfaceExtensions.Copy(SadConsole.Surfaces.ISurface,System.Int32,System.Int32,System.Int32,System.Int32,SadConsole.Surfaces.ISurface,System.Int32,System.Int32)">
            <summary>
            Copies the contents of this cell surface at the specified x,y coordinates to the destination, only with the specified width and height, and copies it to the specified <paramref name="destinationX"/> and <paramref name="destinationY"/> position.
            </summary>
            <param name="source">The source surface</param>
            <param name="x">The x coordinate to start from.</param>
            <param name="y">The y coordinate to start from.</param>
            <param name="width">The width to copy from.</param>
            <param name="height">The height to copy from.</param>
            <param name="destination">The destination surface.</param>
            <param name="destinationX">The x coordinate to copy to.</param>
            <param name="destinationY">The y coordinate to copy to.</param>
        </member>
        <member name="T:SadConsole.Font">
            <summary>
            Represents a specific font size from a <see cref="T:SadConsole.FontMaster"/>.
            </summary>
        </member>
        <member name="T:SadConsole.Font.FontSizes">
            <summary>
            The size options of a font.
            </summary>
        </member>
        <member name="F:SadConsole.Font.FontSizes.Quarter">
            <summary>
            One quater the size of the font. (Original Width and Height * 0.25)
            </summary>
        </member>
        <member name="F:SadConsole.Font.FontSizes.Half">
            <summary>
            Half the size of the font. (Original Width and Height * 0.50)
            </summary>
        </member>
        <member name="F:SadConsole.Font.FontSizes.One">
            <summary>
            Exact size of the font. (Original Width and Height * 1.0)
            </summary>
        </member>
        <member name="F:SadConsole.Font.FontSizes.Two">
            <summary>
            Two times the size of the font. (Original Width and Height * 2.0)
            </summary>
        </member>
        <member name="F:SadConsole.Font.FontSizes.Three">
            <summary>
            Two times the size of the font. (Original Width and Height * 3.0)
            </summary>
        </member>
        <member name="F:SadConsole.Font.FontSizes.Four">
            <summary>
            Two times the size of the font. (Original Width and Height * 4.0)
            </summary>
        </member>
        <member name="P:SadConsole.Font.FontImage">
            <summary>
            The texture of the font.
            </summary>
        </member>
        <member name="P:SadConsole.Font.Size">
            <summary>
            The width and height of each glyph.
            </summary>
        </member>
        <member name="P:SadConsole.Font.MaxGlyphIndex">
            <summary>
            The maximum upper inclusive glyph index of the font.
            </summary>
        </member>
        <member name="P:SadConsole.Font.SolidGlyphIndex">
            <summary>
            Which glyph index is considered completely solid. Used for shading.
            </summary>
        </member>
        <member name="P:SadConsole.Font.SolidGlyphRectangle">
            <summary>
            The rectangle associated with the <see cref="P:SadConsole.Font.SolidGlyphIndex"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Font.GlyphRects">
            <summary>
            A cached array of rectangles of individual glyphs.
            </summary>
        </member>
        <member name="P:SadConsole.Font.Columns">
            <summary>
            How many columns are in the this font.
            </summary>
        </member>
        <member name="P:SadConsole.Font.Rows">
            <summary>
            How many rows are in this font.
            </summary>
        </member>
        <member name="P:SadConsole.Font.SizeMultiple">
            <summary>
            The size originally used to create the font from a <see cref="T:SadConsole.FontMaster"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Font.Name">
            <summary>
            The name of the font used when it is registered with the <see cref="!:Engine.Fonts"/> collection.
            </summary>
        </member>
        <member name="P:SadConsole.Font.Master">
            <summary>
            The <see cref="T:SadConsole.FontMaster"/> that created this <see cref="T:SadConsole.Font"/> instance.
            </summary>
        </member>
        <member name="M:SadConsole.Font.ResizeGraphicsDeviceManager(Microsoft.Xna.Framework.GraphicsDeviceManager,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Resizes the graphics device manager based on this font's glyph size.
            </summary>
            <param name="manager">Graphics device manager to resize.</param>
            <param name="width">The width glyphs.</param>
            <param name="height">The height glyphs.</param>
            <param name="additionalWidth">Additional pixel width to add to the resize.</param>
            <param name="additionalHeight">Additional pixel height to add to the resize.</param>
        </member>
        <member name="T:SadConsole.FontMaster">
            <summary>
            The font stored by the engine. Used to generate the <see cref="T:SadConsole.Font"/> type used by the engine.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.Name">
            <summary>
            The name of this font family.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.FilePath">
            <summary>
            The name of the image file as defined in the .font file.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.LoadedFilePath">
            <summary>
            The path to the file per <see cref="F:SadConsole.Global.SerializerPathHint"/>.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.GlyphHeight">
            <summary>
            The height of each glyph in pixels.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.GlyphWidth">
            <summary>
            The width of each glyph in pixels.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.GlyphPadding">
            <summary>
            The amount of pixels between glyphs.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.SolidGlyphIndex">
            <summary>
            Which glyph index is considered completely solid. Used for shading.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.Columns">
            <summary>
            The amount of columns the font uses, defaults to 16.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.Rows">
            <summary>
            The total rows in the font.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.Image">
            <summary>
            The texture used by the font.
            </summary>
        </member>
        <member name="F:SadConsole.FontMaster.GlyphIndexRects">
            <summary>
            A cached array of rectangles of individual glyphs.
            </summary>
        </member>
        <member name="M:SadConsole.FontMaster.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a SadConsole font using an existing image.
            </summary>
            <param name="fontImage">The image for the font.</param>
            <param name="glyphWidth">The width of each glyph.</param>
            <param name="glyphHeight">The height of each glyph.</param>
            <param name="totalColumns">Glyph columns in the font texture, defaults to 16.</param>
            <param name="glyphPadding">Pixels between each glyph, defaults to 0.</param>
        </member>
        <member name="M:SadConsole.FontMaster.Generate">
            <summary>
            After the font has been loaded, (with the <see cref="P:SadConsole.FontMaster.FilePath"/>, <see cref="P:SadConsole.FontMaster.GlyphHeight"/>, and <see cref="P:SadConsole.FontMaster.GlyphWidth"/> fields filled out) this method will create the actual texture.
            </summary>
        </member>
        <member name="M:SadConsole.FontMaster.ConfigureRects">
            <summary>
            Builds the <see cref="F:SadConsole.FontMaster.GlyphIndexRects"/> array based on the current font settings.
            </summary>
        </member>
        <member name="M:SadConsole.FontMaster.GetFont(SadConsole.Font.FontSizes)">
            <summary>
            Gets a sized font.
            </summary>
            <param name="multiple">How much to multiple the font size by.</param>
            <returns>A font.</returns>
        </member>
        <member name="T:SadConsole.GameHelpers.Animations">
            <summary>
            Helpers related to <see cref="T:SadConsole.Surfaces.AnimatedSurface"/> animations.
            </summary>
        </member>
        <member name="M:SadConsole.GameHelpers.Animations.CreateStatic(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Creates an animated surface that looks like static.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">The height of the surface.</param>
            <param name="frames">How many frames the animation should have.</param>
            <param name="blankChance">Chance a character will be blank. Characters are between index 48-158. Chance is evaluated versus <see cref="M:System.Random.NextDouble"/>.</param>
            <returns>An animation.</returns>
        </member>
        <member name="T:SadConsole.GameHelpers.Directions">
            <summary>
            Direction related types and methods.
            </summary>
        </member>
        <member name="P:SadConsole.GameHelpers.Directions.North">
            <summary>
            Returns a point that faces north (0, -1);
            </summary>
        </member>
        <member name="P:SadConsole.GameHelpers.Directions.South">
            <summary>
            Returns a point that faces south (0, 1);
            </summary>
        </member>
        <member name="P:SadConsole.GameHelpers.Directions.East">
            <summary>
            Returns a point that faces east (1, 0);
            </summary>
        </member>
        <member name="P:SadConsole.GameHelpers.Directions.West">
            <summary>
            Returns a point that faces west (-1, 0);
            </summary>
        </member>
        <member name="P:SadConsole.GameHelpers.Directions.NorthWest">
            <summary>
            Returns a point that faces north west (-1, -1);
            </summary>
        </member>
        <member name="P:SadConsole.GameHelpers.Directions.NorthEast">
            <summary>
            Returns a point that faces north east (1, -1);
            </summary>
        </member>
        <member name="P:SadConsole.GameHelpers.Directions.SouthWest">
            <summary>
            Returns a point that faces south west (-1, 1);
            </summary>
        </member>
        <member name="P:SadConsole.GameHelpers.Directions.SouthEast">
            <summary>
            Returns a point that faces south east (1, 1);
            </summary>
        </member>
        <member name="P:SadConsole.GameHelpers.Directions.Points">
            <summary>
            Returns an array of directional points that use the index from <see cref="T:SadConsole.GameHelpers.Directions.DirectionEnum"/>.
            </summary>
        </member>
        <member name="T:SadConsole.GameHelpers.Directions.DirectionEnum">
            <summary>
            A compass direction enumeration.
            </summary>
        </member>
        <member name="M:SadConsole.GameHelpers.Directions.GetOpposite(SadConsole.GameHelpers.Directions.DirectionEnum)">
            <summary>
            Returns the opposite direction of a <see cref="T:SadConsole.GameHelpers.Directions.DirectionEnum"/> value.
            </summary>
            <param name="direction">The direction.</param>
            <returns>The opposite direction.</returns>
        </member>
        <member name="M:SadConsole.GameHelpers.Directions.GetCardinalDirection(SadConsole.GameHelpers.Directions.DirectionEnum,System.Boolean)">
            <summary>
            Discards NW/NE/SW/SE directions in favor of N/S/E/W for a <see cref="T:SadConsole.GameHelpers.Directions.DirectionEnum"/> value.
            </summary>
            <param name="direction">The direction.</param>
            <param name="favorNorthSouth">If true, returns N for NW/NE and S for SW/SE. Otherwise W for SW/NW and E for SE/NE.</param>
            <returns>The opposite direction.</returns>
        </member>
        <member name="M:SadConsole.GameHelpers.Directions.TurnLeft(SadConsole.GameHelpers.Directions.DirectionEnum,System.Boolean)">
            <summary>
            Gets the direction left of the <paramref name="direction"/> value.
            </summary>
            <param name="direction">The direction.</param>
            <param name="useDiagonal">If true, uses NW/NE/SW/SE in considering the result. Otherwise the result will always be a N/S/E/W value.</param>
            <returns>The left direction.</returns>
        </member>
        <member name="M:SadConsole.GameHelpers.Directions.TurnRight(SadConsole.GameHelpers.Directions.DirectionEnum,System.Boolean)">
            <summary>
            Gets the direction right of the <paramref name="direction"/> value.
            </summary>
            <param name="direction">The direction.</param>
            <param name="useDiagonal">If true, uses NW/NE/SW/SE in considering the result. Otherwise the result will always be a N/S/E/W value.</param>
            <returns>The right direction.</returns>
        </member>
        <member name="M:SadConsole.GameHelpers.Directions.GetValidDirections(Microsoft.Xna.Framework.Point,System.Int32,System.Int32)">
            <summary>
            Gets a list of indexed boolean values to indicate if the direction from the <paramref name="position"/> falls in the (0, 0, <paramref name="width"/>, <paramref name="height"/>) area.
            </summary>
            <param name="position">The position to test from.</param>
            <param name="width">The width of the area.</param>
            <param name="height">The height of the area.</param>
            <returns>An array of bool values indicating if the direction is valid or not; indexed with the value of a <see cref="T:SadConsole.GameHelpers.Directions.DirectionEnum"/>.</returns>
        </member>
        <member name="M:SadConsole.GameHelpers.Directions.GetValidDirections(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Gets a list of indexed boolean values to indicate if the direction from the <paramref name="position"/> falls in the <paramref name="area"/>.
            </summary>
            <param name="position">The position to test from.</param>
            <param name="area">The area to test.</param>
            <returns>An array of bool values indicating if the direction is valid or not; indexed with the value of a <see cref="T:SadConsole.GameHelpers.Directions.DirectionEnum"/>.</returns>
        </member>
        <member name="M:SadConsole.GameHelpers.Directions.GetValidDirections(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Point)">
            <summary>
            Gets a list of indexed boolean values to indicate if the direction from the <paramref name="position"/> falls in the <paramref name="area"/>.
            </summary>
            <param name="position">The position to test from.</param>
            <param name="area">The area to test.</param>
            <returns>An array of bool values indicating if the direction is valid or not; indexed with the value of a <see cref="T:SadConsole.GameHelpers.Directions.DirectionEnum"/>.</returns>
        </member>
        <member name="M:SadConsole.GameHelpers.Directions.GetDirectionPoints(Microsoft.Xna.Framework.Point)">
            <summary>
            Gets an indexed array of direction positions based on the <paramref name="position"/>.
            </summary>
            <param name="position">The source position.</param>
            <returns>An array of positions indexed with the value of a <see cref="T:SadConsole.GameHelpers.Directions.DirectionEnum"/>.</returns>
        </member>
        <member name="M:SadConsole.GameHelpers.Directions.GetDirectionIndexes(Microsoft.Xna.Framework.Point,System.Int32,System.Int32)">
            <summary>
            Gets an array of <see cref="P:SadConsole.Surfaces.ISurface.Cells"/> indexes of each <see cref="T:SadConsole.GameHelpers.Directions.DirectionEnum"/> from the current <paramref name="position"/>.
            </summary>
            <param name="position">The position center.</param>
            <param name="areaWidth">The width of the area.</param>
            <param name="areaHeight">The height of the area.</param>
            <returns>The index of each position. A value of -1 represents an invalid position.</returns>
        </member>
        <member name="M:SadConsole.GameHelpers.Directions.GetDirectionIndexes(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Gets an array of <see cref="P:SadConsole.Surfaces.ISurface.Cells"/> indexes of each <see cref="T:SadConsole.GameHelpers.Directions.DirectionEnum"/> from the current <paramref name="position"/>.
            </summary>
            <param name="position">The position center.</param>
            <param name="area">The area containing the position.</param>
            <returns>The index of each position. A value of -1 represents an invalid position.</returns>
        </member>
        <member name="M:SadConsole.GameHelpers.Directions.ToHeading(SadConsole.GameHelpers.Directions.DirectionEnum)">
            <summary>
            Returns a heading angle based on the direction.
            </summary>
            <param name="direction">Direction to convert.</param>
            <returns>An angle between 0 (east) and 315 (south east) degrees.</returns>
        </member>
        <member name="M:SadConsole.GameHelpers.Directions.FromHeading(System.Single,System.Single)">
            <summary>
            Returns a direction based on a heading angle
            </summary>
            <param name="heading"></param>
            <param name="compensationHeading"></param>
            <returns></returns>
        </member>
        <member name="T:SadConsole.GameHelpers.GameObject">
            <summary>
            A positionable and animated game object.
            </summary>
        </member>
        <member name="E:SadConsole.GameHelpers.GameObject.AnimationStateChanged">
            <summary>
            Automatically forwards the <see cref="E:SadConsole.Surfaces.AnimatedSurface.AnimationStateChanged"/> event.
            </summary>
        </member>
        <member name="F:SadConsole.GameHelpers.GameObject.renderer">
            <summary>
            Renderer used for drawing the game object.
            </summary>
        </member>
        <member name="F:SadConsole.GameHelpers.GameObject.usePixelPositioning">
            <summary>
            Pixel positioning flag for position.
            </summary>
        </member>
        <member name="F:SadConsole.GameHelpers.GameObject.animation">
            <summary>
            Animation for the game object.
            </summary>
        </member>
        <member name="F:SadConsole.GameHelpers.GameObject.font">
            <summary>
            Font for the game object.
            </summary>
        </member>
        <member name="F:SadConsole.GameHelpers.GameObject.positionOffset">
            <summary>
            The offset to render this object at.
            </summary>
        </member>
        <member name="P:SadConsole.GameHelpers.GameObject.UsePixelPositioning">
            <summary>
            Treats the <see cref="P:SadConsole.IScreen.Position"/> of the game object as if it is pixels and not cells.
            </summary>
        </member>
        <member name="P:SadConsole.GameHelpers.GameObject.Name">
            <summary>
            A friendly name of the game object.
            </summary>
        </member>
        <member name="P:SadConsole.GameHelpers.GameObject.Animation">
            <summary>
            The current animation.
            </summary>
        </member>
        <member name="P:SadConsole.GameHelpers.GameObject.Animations">
            <summary>
            Collection of animations associated with this game object.
            </summary>
        </member>
        <member name="P:SadConsole.GameHelpers.GameObject.PositionOffset">
            <summary>
            Offsets the position by this amount.
            </summary>
        </member>
        <member name="M:SadConsole.GameHelpers.GameObject.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new GameObject with the default font.
            </summary>
        </member>
        <member name="M:SadConsole.GameHelpers.GameObject.#ctor(System.Int32,System.Int32,SadConsole.Font)">
            <summary>
            Creates a new GameObject.
            </summary>
        </member>
        <member name="M:SadConsole.GameHelpers.GameObject.#ctor(SadConsole.Surfaces.AnimatedSurface)">
            <summary>
            Creates a new GameObject with a default animation/
            </summary>
            <param name="animation">The default animation. The animation will have its <see cref="P:SadConsole.Surfaces.AnimatedSurface.Name"/> property changesd to "default".</param>
        </member>
        <member name="M:SadConsole.GameHelpers.GameObject.Draw(System.TimeSpan)">
            <summary>
            Renders the game object and any attached children.
            </summary>
            <param name="timeElapsed">The time since the last call.</param>
        </member>
        <member name="M:SadConsole.GameHelpers.GameObject.Update(System.TimeSpan)">
            <summary>
            Updates the game object animation.
            </summary>
            <param name="timeElapsed">The time since the last call.</param>
        </member>
        <member name="M:SadConsole.GameHelpers.GameObject.Save(System.String)">
            <summary>
            Saves the <see cref="T:SadConsole.GameHelpers.GameObject"/> to a file.
            </summary>
            <param name="file">The destination file.</param>
        </member>
        <member name="M:SadConsole.GameHelpers.GameObject.Load(System.String)">
            <summary>
            Loads a <see cref="T:SadConsole.GameHelpers.GameObject"/> from a file.
            </summary>
            <param name="file">The source file.</param>
            <returns></returns>
        </member>
        <member name="T:SadConsole.GameHelpers.Scene">
            <summary>
            Groups a <see cref="T:SadConsole.Surfaces.ISurface"/> and a list of <see cref="T:SadConsole.GameHelpers.GameObject"/> types together.
            </summary>
        </member>
        <member name="F:SadConsole.GameHelpers.Scene.Objects">
            <summary>
            The objects for the scene.
            </summary>
        </member>
        <member name="F:SadConsole.GameHelpers.Scene.Zones">
            <summary>
            Regions defined for the scene.
            </summary>
        </member>
        <member name="F:SadConsole.GameHelpers.Scene.Hotspots">
            <summary>
            Hotspots defined for the scene.
            </summary>
        </member>
        <member name="P:SadConsole.GameHelpers.Scene.Width">
            <summary>
            Width of the backing <see cref="P:SadConsole.GameHelpers.Scene.Surface"/>.
            </summary>
        </member>
        <member name="P:SadConsole.GameHelpers.Scene.Height">
            <summary>
            Height of the backing <see cref="P:SadConsole.GameHelpers.Scene.Surface"/>.
            </summary>
        </member>
        <member name="P:SadConsole.GameHelpers.Scene.Surface">
            <summary>
            Access to the backing console that is internally wrapped in this scene.
            </summary>
        </member>
        <member name="P:SadConsole.GameHelpers.Scene.SurfaceRenderer">
            <summary>
            The renderer used in drawing the <see cref="P:SadConsole.GameHelpers.Scene.Surface"/>.
            </summary>
        </member>
        <member name="P:SadConsole.GameHelpers.Scene.UsePixelPositioning">
            <summary>
            Treats the <see cref="!:Position"/> of the console as if it is pixels and not cells.
            </summary>
        </member>
        <member name="M:SadConsole.GameHelpers.Scene.#ctor(SadConsole.Surfaces.ISurface,SadConsole.Renderers.ISurfaceRenderer)">
            <summary>
            Creates a new Scene from an existing <see cref="T:SadConsole.Surfaces.LayeredSurface"/>.
            </summary>
            <param name="surface">The surface for the scene.</param>
            <param name="renderer">The renderer for the surface.</param>
        </member>
        <member name="M:SadConsole.GameHelpers.Scene.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new surface using a <see cref="T:SadConsole.Surfaces.BasicSurface"/> at the specified width and height.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">The height of the surface.</param>
        </member>
        <member name="M:SadConsole.GameHelpers.Scene.Save(System.String)">
            <summary>
            Saves the scene to a file. You must serialize the <see cref="P:SadConsole.GameHelpers.Scene.Surface"/> separately.
            </summary>
            <param name="file">The destination file.</param>
        </member>
        <member name="M:SadConsole.GameHelpers.Scene.Load(System.String,SadConsole.Surfaces.ISurface,SadConsole.Renderers.ISurfaceRenderer)">
            <summary>
            Loads scene from a file.
            </summary>
            <param name="file">The source file.</param>
            <param name="surface">The surface for the scene.</param>
            <param name="renderer">The renderer used to draw the surface.</param>
            <returns></returns>
        </member>
        <member name="T:SadConsole.GameHelpers.Hotspot">
            <summary>
            A group of positions with a set of settings.
            </summary>
        </member>
        <member name="F:SadConsole.GameHelpers.Hotspot.Positions">
            <summary>
            The hotspot position on the map.
            </summary>
        </member>
        <member name="F:SadConsole.GameHelpers.Hotspot.Title">
            <summary>
            A title for the area.
            </summary>
        </member>
        <member name="F:SadConsole.GameHelpers.Hotspot.DebugAppearance">
            <summary>
            A visual for the hotspot to help debug.
            </summary>
        </member>
        <member name="F:SadConsole.GameHelpers.Hotspot.Settings">
            <summary>
            Key-value pairs for the hotspot.
            </summary>
        </member>
        <member name="M:SadConsole.GameHelpers.Hotspot.Contains(Microsoft.Xna.Framework.Point)">
            <summary>
            Return true when the specified point is in the list of <see cref="F:SadConsole.GameHelpers.Hotspot.Positions"/>.
            </summary>
            <param name="point">The position to check for.</param>
            <returns>True or false based on if the position is associated with the Hotspot.</returns>
        </member>
        <member name="T:SadConsole.GameHelpers.RangeInt">
            <summary>
            Produces values based on a minimum and maximum range.
            </summary>
        </member>
        <member name="F:SadConsole.GameHelpers.RangeInt.Maximum">
            <summary>
            The maximum value.
            </summary>
        </member>
        <member name="F:SadConsole.GameHelpers.RangeInt.Minimum">
            <summary>
            The minimum value.
            </summary>
        </member>
        <member name="M:SadConsole.GameHelpers.RangeInt.Get">
            <summary>
            Gets a random number between the <see cref="F:SadConsole.GameHelpers.RangeInt.Minimum"/> and <see cref="F:SadConsole.GameHelpers.RangeInt.Maximum"/>.
            </summary>
            <returns>A random number.</returns>
        </member>
        <member name="T:SadConsole.GameHelpers.RangeDouble">
            <summary>
            Produces values based on a minimum and maximum range.
            </summary>
        </member>
        <member name="F:SadConsole.GameHelpers.RangeDouble.Maximum">
            <summary>
            The maximum value.
            </summary>
        </member>
        <member name="F:SadConsole.GameHelpers.RangeDouble.Minimum">
            <summary>
            The minimum value.
            </summary>
        </member>
        <member name="M:SadConsole.GameHelpers.RangeDouble.Get">
            <summary>
            Gets a random number between the <see cref="F:SadConsole.GameHelpers.RangeDouble.Minimum"/> and <see cref="F:SadConsole.GameHelpers.RangeDouble.Maximum"/>.
            </summary>
            <returns>A random number.</returns>
        </member>
        <member name="T:SadConsole.GameHelpers.Zone">
            <summary>
            Defines an area for a scene.
            </summary>
        </member>
        <member name="F:SadConsole.GameHelpers.Zone.Area">
            <summary>
            The area the zone covers.
            </summary>
        </member>
        <member name="F:SadConsole.GameHelpers.Zone.Title">
            <summary>
            A title for the area.
            </summary>
        </member>
        <member name="F:SadConsole.GameHelpers.Zone.DebugAppearance">
            <summary>
            A visual for the area to help debug.
            </summary>
        </member>
        <member name="F:SadConsole.GameHelpers.Zone.Settings">
            <summary>
            Key-value pairs for the zone.
            </summary>
        </member>
        <member name="T:SadConsole.Palette">
            <summary>
            A palette of colors.
            </summary>
        </member>
        <member name="P:SadConsole.Palette.Length">
            <summary>
            How many colors the palette has.
            </summary>
        </member>
        <member name="P:SadConsole.Palette.Item(System.Int32)">
            <summary>
            Gets or sets a color in the palette by index.
            </summary>
            <param name="index">Index of the color.</param>
            <returns>A color.</returns>
        </member>
        <member name="M:SadConsole.Palette.#ctor(System.Int32)">
            <summary>
            Creates a new palette with the specified amount of colors.
            </summary>
            <param name="colors">The number of colors.</param>
        </member>
        <member name="M:SadConsole.Palette.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Color})">
            <summary>
            Creates a new palette of colors from a list of existing colors.
            </summary>
            <param name="colors">The list of colors this palette is made from.</param>
        </member>
        <member name="M:SadConsole.Palette.ShiftLeft">
            <summary>
            Shifts the entire palette once to the left.
            </summary>
        </member>
        <member name="M:SadConsole.Palette.ShiftRight">
            <summary>
            Shifts the entire palette once to the right.
            </summary>
        </member>
        <member name="M:SadConsole.Palette.ShiftLeft(System.Int32,System.Int32)">
            <summary>
            Shifts a range of colors in the palette once to the left.
            </summary>
            <param name="startingIndex">The starting index in the palette.</param>
            <param name="count">The amount of colors to shift from the starting index.</param>
        </member>
        <member name="M:SadConsole.Palette.ShiftRight(System.Int32,System.Int32)">
            <summary>
            Shifts a range of colors in the palette once to the right.
            </summary>
            <param name="startingIndex">The starting index in the palette.</param>
            <param name="count">The amount of colors to shift from the starting index.</param>
        </member>
        <member name="M:SadConsole.Palette.GetNearest(Microsoft.Xna.Framework.Color)">
            <summary>
            Gets the closest color in the palette to the provided color.
            </summary>
            <param name="color">The color to find.</param>
            <returns>The palette index of the closest color.</returns>
        </member>
        <member name="M:SadConsole.Palette.GetEnumerator">
            <summary>
            Gets the list of colors in the palette.
            </summary>
            <returns>The colors in the palette.</returns>
        </member>
        <member name="M:SadConsole.Palette.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the list of colors in the palette.
            </summary>
            <returns>The colors in the palette.</returns>
        </member>
        <member name="T:SadConsole.Surfaces.SurfaceEditor">
            <summary>
            Provides methods to manipulate a <see cref="T:SadConsole.Surfaces.ISurface"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.SurfaceEditor.LineStyleIndexesThin">
            <summary>
            Glyph indexes for a thin line.
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.SurfaceEditor.LineStyleIndexesThick">
            <summary>
            Glyph indexes for a thick line.
            </summary>
        </member>
        <member name="T:SadConsole.Surfaces.SurfaceEditor.LineRoadIndex">
            <summary>
            Array index enum for line glyphs.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.ConnectLines(SadConsole.Surfaces.ISurface)">
            <summary>
            Connects all lines in a surface for both <see cref="F:SadConsole.Surfaces.SurfaceEditor.LineStyleIndexesThin"/> and <see cref="F:SadConsole.Surfaces.SurfaceEditor.LineStyleIndexesThick"/> styles.
            </summary>
            <param name="surface">The surface to process.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.ConnectLines(SadConsole.Surfaces.ISurface,System.Int32[])">
            <summary>
            Connects all lines in a surface based on the <paramref name="lineStyle"/> style provided.
            </summary>
            <param name="surface">The surface to process.</param>
            <param name="lineStyle">The array of line styles indexed by <see cref="T:SadConsole.Surfaces.SurfaceEditor.LineRoadIndex"/>.</param>
        </member>
        <member name="F:SadConsole.Surfaces.SurfaceEditor.textSurface">
            <summary>
            The surface this editor is working with.
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.SurfaceEditor.TimesShiftedDown">
            <summary>
            A variable that tracks how many times this editor shifted the surface down.
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.SurfaceEditor.TimesShiftedRight">
            <summary>
            A variable that tracks how many times this editor shifted the surface right.
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.SurfaceEditor.TimesShiftedLeft">
            <summary>
            A variable that tracks how many times this editor shifted the surface left.
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.SurfaceEditor.TimesShiftedUp">
            <summary>
            A variable that tracks how many times this editor shifted the surface up.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.SurfaceEditor.Width">
            <summary>
            The width of the text surface being edited.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.SurfaceEditor.Height">
            <summary>
            The height of the text surface being edited.
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.SurfaceEditor.UsePrintProcessor">
            <summary>
            When true, the <see cref="M:SadConsole.ColoredString.Parse(System.String,System.Int32,SadConsole.Surfaces.ISurface,SadConsole.Surfaces.SurfaceEditor,SadConsole.StringParser.ParseCommandStacks)"/> command is used to print strings.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.SurfaceEditor.TextSurface">
            <summary>
            The text surface being changed.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.SurfaceEditor.Effects">
            <summary>
            The effects manager associated with the <see cref="P:SadConsole.Surfaces.SurfaceEditor.TextSurface"/>.
            </summary>
            <remarks>
            When the <see cref="P:SadConsole.Surfaces.SurfaceEditor.TextSurface"/> property is set, a new <see cref="T:SadConsole.Effects.EffectsManager"/> instance is created.
            </remarks>
        </member>
        <member name="P:SadConsole.Surfaces.SurfaceEditor.Item(System.Int32,System.Int32)">
            <summary>
            Gets a cell based on it's coordinates on the surface.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <returns>The indicated cell.</returns>
        </member>
        <member name="P:SadConsole.Surfaces.SurfaceEditor.Item(System.Int32)">
            <summary>
            Gets a cell by index.
            </summary>
            <param name="index">The index of the cell.</param>
            <returns>The indicated cell.</returns>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.#ctor(SadConsole.Surfaces.ISurface)">
            <summary>
            Creates a new cell surface that can be resized and also have its textSurface.Cells resized.
            </summary>
            <remarks>You must set the Font property before rendering this cell surface.</remarks>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.OnSurfaceChanged(SadConsole.Surfaces.ISurface,SadConsole.Surfaces.ISurface)">
            <summary>
            Called when the <see cref="P:SadConsole.Surfaces.SurfaceEditor.TextSurface"/> property is changed. Sets <see cref="P:SadConsole.Surfaces.SurfaceEditor.Effects"/> to a new instance of <see cref="T:SadConsole.Effects.EffectsManager"/>.
            </summary>
            <param name="oldSurface">The previous text surface.</param>
            <param name="newSurface">The new text surface.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.SetPixels(Microsoft.Xna.Framework.Color[])">
            <summary>
            Sets each background of a cell to the array of colors. Must be the same length as this cell surface.
            </summary>
            <param name="pixels">The colors to place.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.IsValidCell(System.Int32,System.Int32)">
            <summary>
            Tests if a cell is valid based on its x,y position.
            </summary>
            <param name="x">The x coordinate of the cell to test.</param>
            <param name="y">The y coordinate of the cell to test.</param>
            <returns>A true value indicating the cell by x,y does exist in this cell surface.</returns>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.IsValidCell(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tests if a cell is valid based on its x,y position.
            </summary>
            <param name="x">The x coordinate of the cell to test.</param>
            <param name="y">The y coordinate of the cell to test.</param>
            <param name="index">If the cell is valid, the index of the cell when found.</param>
            <returns>A true value indicating the cell by x,y does exist in this cell surface.</returns>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.IsValidCell(System.Int32)">
            <summary>
            Tests if a cell is valid based on its index.
            </summary>
            <param name="index">The index to test.</param>
            <returns>A true value indicating the cell index is in this cell surface.</returns>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.SetGlyph(System.Int32,System.Int32,System.Int32)">
            <summary>
            Changes the glyph of a specified cell to a new value.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="glyph">The desired glyph of the cell.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.SetGlyph(System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Color)">
            <summary>
            Changes the glyph, foreground, and background of a cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="glyph">The desired glyph.</param>
            <param name="foreground">The desired foreground.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.SetGlyph(System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Changes the glyph, foreground, and background of a cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="glyph">The desired glyph.</param>
            <param name="foreground">The desired foreground.</param>
            <param name="background">The desired background.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.SetGlyph(System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteEffects)">
            <summary>
            Changes the glyph, foreground, background, and effect of a cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="glyph">The desired glyph.</param>
            <param name="foreground">The desired foreground.</param>
            <param name="background">The desired background.</param>
            <param name="mirror">Sets how the glyph will be mirrored.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.GetGlyph(System.Int32,System.Int32)">
            <summary>
            Gets the glyph of a specified cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The glyph index.</returns>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.SetForeground(System.Int32,System.Int32,Microsoft.Xna.Framework.Color)">
            <summary>
            Changes the foreground of a specified cell to a new color.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="color">The desired color of the cell.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.GetForeground(System.Int32,System.Int32)">
            <summary>
            Gets the foreground of a specified cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.SetBackground(System.Int32,System.Int32,Microsoft.Xna.Framework.Color)">
            <summary>
            Changes the background of a cell to the specified color.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="color">The desired color of the cell.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.GetBackground(System.Int32,System.Int32)">
            <summary>
            Gets the background of a specified cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.SetEffect(System.Int32,System.Int32,SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a cell to the specified effect.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="effect">The desired effect.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.SetEffect(System.Int32,SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a cell to the specified effect.
            </summary>
            <param name="index">Index of the cell.</param>
            <param name="effect">The desired effect.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.SetEffect(System.Collections.Generic.IEnumerable{SadConsole.Cell},SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a list of cells to the specified effect.
            </summary>
            <param name="cells">The cells for the effect.</param>
            <param name="effect">The desired effect.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.SetEffect(SadConsole.Cell,SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a cell to the specified effect.
            </summary>
            <param name="cell">The cells for the effect.</param>
            <param name="effect">The desired effect.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.GetEffect(System.Int32,System.Int32)">
            <summary>
            Gets the effect of the specified cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The effect.</returns>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.SetCell(System.Int32,System.Int32,SadConsole.Cell)">
            <summary>
            Changes the appearance of the cell. The appearance represents the look of a cell and will first be cloned, then applied to the cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="appearance">The desired appearance of the cell. A null value cannot be passed.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.GetCell(System.Int32,System.Int32)">
            <summary>
            Gets the appearance of a cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The appearance.</returns>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.GetMirror(System.Int32,System.Int32)">
            <summary>
            Gets the sprite effect of a specified cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.SetMirror(System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SpriteEffects)">
            <summary>
            Sets the sprite effect of a specified cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="mirror">The mirror of the cell.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.FillWithRandomGarbage(System.Boolean)">
            <summary>
            Fills a console with random colors and glyphs.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.Print(System.Int32,System.Int32,System.String)">
            <summary>
            Draws the string on the console at the specified location, wrapping if needed.
            </summary>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.Print(System.Int32,System.Int32,System.String,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws the string on the console at the specified location and color, wrapping if needed.
            </summary>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="foreground">Sets the foreground of all characters in the text.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.Print(System.Int32,System.Int32,System.String,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws the string on the console at the specified location with the specified foreground and background color, wrapping if needed.
            </summary>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="foreground">Sets the foreground of all characters in the text.</param>
            <param name="background">Sets the background of all characters in the text.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.Print(System.Int32,System.Int32,System.String,System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Graphics.SpriteEffects})">
            <summary>
            Draws the string on the console at the specified location with the specified settings. 
            </summary>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="foreground">Sets the foreground of all characters in the text.</param>
            <param name="background">Sets the background of all characters in the text.</param>
            <param name="mirror">The mirror to set on all characters in the text.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.Print(System.Int32,System.Int32,System.String,SadConsole.Cell,SadConsole.Effects.ICellEffect)">
            <summary>
            Draws the string on the console at the specified location, wrapping if needed.
            </summary>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="appearance">The appearance of the cell</param>
            <param name="effect">An optional effect to apply to the printed cells.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.Print(System.Int32,System.Int32,SadConsole.ColoredString)">
            <summary>
            Draws the string on the console at the specified location, wrapping if needed.
            </summary>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.GetString(System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds a string from the text surface from the specified coordinates.
            </summary>
            <param name="x">The x position of the surface to start at.</param>
            <param name="y">The y position of the surface to start at.</param>
            <param name="length">How many characters to fill the string with.</param>
            <returns>A string built from the text surface data.</returns>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.GetString(System.Int32,System.Int32)">
            <summary>
            Builds a string from the text surface.
            </summary>
            <param name="index">Where to start getting characters from.</param>
            <param name="length">How many characters to fill the string with.</param>
            <returns>A string built from the text surface data.</returns>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.GetStringColored(System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds a string from the text surface from the specified coordinates.
            </summary>
            <param name="x">The x position of the surface to start at.</param>
            <param name="y">The y position of the surface to start at.</param>
            <param name="length">How many characters to fill the string with.</param>
            <returns>A string built from the text surface data.</returns>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.GetStringColored(System.Int32,System.Int32)">
            <summary>
            Builds a string from the text surface.
            </summary>
            <param name="index">Where to start getting characters from.</param>
            <param name="length">How many characters to fill the string with.</param>
            <returns>A string built from the text surface data.</returns>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.Clear">
            <summary>
            Clears the console data. Characters are reset to 0, the forground and background are set to default, and effect set to none.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.Clear(System.Int32,System.Int32)">
            <summary>
            Clears a cell. Character is reset to 0, the forground and background is set to default, and effect is set to none.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.ClearShiftValues">
            <summary>
            Resets the shifted amounts to 0, as if the surface has never shifted.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.ShiftUp">
            <summary>
            Scrolls all the console data up by one.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.ShiftUp(System.Int32,System.Boolean)">
            <summary>
            Scrolls all the console data up by the specified amount of rows.
            </summary>
            <param name="amount">How many rows to shift.</param>
            <param name="wrap">When false, a blank line appears at the borrom. When true, the top line appears at the borrom.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.ShiftDown">
            <summary>
            Scrolls all the console data down by one.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.ShiftDown(System.Int32,System.Boolean)">
            <summary>
            Scrolls all the console data down by the specified amount of rows.
            </summary>
            <param name="amount">How many rows to shift.</param>
            <param name="wrap">When false, a blank line appears at the top. When true, the bottom line appears at the top.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.ShiftRight">
            <summary>
            Scrolls all the console data right by one.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.ShiftRight(System.Int32,System.Boolean)">
            <summary>
            Scrolls all the console data right by the specified amount.
            </summary>
            <param name="amount">How much to scroll.</param>
            <param name="wrap">When false, a blank line appears at the left. When true, the right line appears at the left.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.ShiftLeft">
            <summary>
            Scrolls all the console data left by one.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.ShiftLeft(System.Int32,System.Boolean)">
            <summary>
            Scrolls all the console data left by the specified amount.
            </summary>
            <param name="amount">How much to scroll.</param>
            <param name="wrap">When false, a blank line appears at the right. When true, the left line appears at the right.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.Fill(System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{System.Int32},System.Nullable{Microsoft.Xna.Framework.Graphics.SpriteEffects})">
            <summary>
            Fills the console.
            </summary>
            <param name="foreground">Foregorund of every cell. If null, skips.</param>
            <param name="background">Foregorund of every cell. If null, skips.</param>
            <param name="glyph">Glyph of every cell. If null, skips.</param>
            <param name="spriteEffect">Sprite effect of every cell. If null, skips.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.Fill(Microsoft.Xna.Framework.Rectangle,System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{System.Int32},System.Nullable{Microsoft.Xna.Framework.Graphics.SpriteEffects})">
            <summary>
            Fills the specified area.
            </summary>
            <param name="area">The area to fill.</param>
            <param name="foreground">Foregorund of every cell. If null, skips.</param>
            <param name="background">Foregorund of every cell. If null, skips.</param>
            <param name="glyph">Glyph of every cell. If null, skips.</param>
            <param name="spriteEffect">Sprite effect of every cell. If null, skips.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.ConnectLines">
            <summary>
            Connects all lines for both <see cref="F:SadConsole.Surfaces.SurfaceEditor.LineStyleIndexesThin"/> and <see cref="F:SadConsole.Surfaces.SurfaceEditor.LineStyleIndexesThick"/> styles.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.ConnectLines(System.Int32[])">
            <summary>
            Connects all lines based on the <paramref name="lineStyle"/> style provided.
            </summary>
            <param name="lineStyle">The array of line styles indexed by <see cref="T:SadConsole.Surfaces.SurfaceEditor.LineRoadIndex"/>.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceEditor.DrawLine(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{System.Int32})">
            <summary>
            Draws a line from <paramref name="start"/> to <paramref name="end"/>.
            </summary>
            <param name="start">Starting point of the line.</param>
            <param name="end">Ending point of the line.</param>
            <param name="foreground">Foreground to set. If null, skipped.</param>
            <param name="background">Background to set. If null, skipped.</param>
            <param name="glyph">Glyph to set. If null, skipped.</param>
            <returns>A list of cells the line touched; ordered from first to last.</returns>
        </member>
        <member name="T:SadConsole.Surfaces.AnimatedSurface">
            <summary>
            Animates a list of frames.
            </summary>
        </member>
        <member name="E:SadConsole.Surfaces.AnimatedSurface.AnimationStateChanged">
            <summary>
            Raised when the <see cref="T:SadConsole.Surfaces.AnimatedSurface.AnimationState"/> changes.
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.AnimatedSurface._addedTime">
            <summary>
            Time counter for the naimation
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.AnimatedSurface._currentFrameIndex">
            <summary>
            The current frame index being animated.
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.AnimatedSurface._animatedTime">
            <summary>
            The length of the animation
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.AnimatedSurface._timePerFrame">
            <summary>
            How much time per animated frame should be used.
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.AnimatedSurface._isPlaying">
            <summary>
            Indicates the animation is currently animating.
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.AnimatedSurface._font">
            <summary>
            The font to use with all frames.
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.AnimatedSurface.Frames">
            <summary>
            All frames of the animation
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.AnimatedSurface.state">
            <summary>
            The state of the animation.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.AnimatedSurface.Center">
            <summary>
            Center of the animation used in positioning.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.AnimatedSurface.Repeat">
            <summary>
            Indicates whether or not this animation will repeat once it has finished animating.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.AnimatedSurface.IsPlaying">
            <summary>
            When true, the <see cref="M:SadConsole.Surfaces.AnimatedSurface.Update"/> method will advance the frames.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.AnimatedSurface.AnimationDuration">
            <summary>
            The length of the animation.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.AnimatedSurface.CurrentFrameIndex">
            <summary>
            Gets or sets the current frame index to animate.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.AnimatedSurface.IsEmpty">
            <summary>
            Indicates the animation is empty.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.AnimatedSurface.Name">
            <summary>
            Gets the name of this animation.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.AnimatedSurface.CurrentFrame">
            <summary>
            Gets the currently frame being animated.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.AnimatedSurface.State">
            <summary>
            Gets the current animation state.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.AnimatedSurface.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new animation with the specified name, width, and height.
            </summary>
            <param name="name">The name of the animation.</param>
            <param name="width">The width of each frame this animation will have.</param>
            <param name="height">The height of each frame this animation will have.</param>
        </member>
        <member name="M:SadConsole.Surfaces.AnimatedSurface.#ctor(System.String,System.Int32,System.Int32,SadConsole.Font)">
            <summary>
            Creates a new animation with the specified name, width, and height.
            </summary>
            <param name="name">The name of the animation.</param>
            <param name="width">The width of each frame this animation will have.</param>
            <param name="height">The height of each frame this animation will have.</param>
            <param name="font">The font used with this animation.</param>
        </member>
        <member name="M:SadConsole.Surfaces.AnimatedSurface.SetRenderCells">
            <summary>
            Forces the area of this text surface to always be the full width and height.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.AnimatedSurface.UpdateFrameReferences">
            <summary>
            Updates the base <see cref="!:TextSurface"/> render references to the current frame.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.AnimatedSurface.CreateFrame">
            <summary>
            Creates a new frame with the same dimensions as this entity and adds it to the Frames collection of the entity.
            </summary>
            <returns>The created frame.</returns>
        </member>
        <member name="M:SadConsole.Surfaces.AnimatedSurface.CalculateFrameDuration">
            <summary>
            Calculates the time needed per frame for rendering.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.AnimatedSurface.Stop">
            <summary>
            Stops animating.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.AnimatedSurface.Start">
            <summary>
            Starts animating the frames.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.AnimatedSurface.Restart">
            <summary>
            Restarts the animation from the first frame.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.AnimatedSurface.Update">
            <summary>
            Updates the animation frames based on the time passed since the last call to this method.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.AnimatedSurface.ToString">
            <summary>
            Returns the name of the animation.
            </summary>
            <returns>The name.</returns>
        </member>
        <member name="M:SadConsole.Surfaces.AnimatedSurface.Save(System.String)">
            <summary>
            Saves the animated text surface to a file.
            </summary>
            <param name="file">The destination file.</param>
        </member>
        <member name="M:SadConsole.Surfaces.AnimatedSurface.Load(System.String)">
            <summary>
            Loads an animated text surface from a file.
            </summary>
            <param name="file">The source file.</param>
            <returns></returns>
        </member>
        <member name="T:SadConsole.Surfaces.AnimatedSurface.AnimationStateChangedEventArgs">
            <summary>
            Event args for when the animation state changes
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.AnimatedSurface.AnimationStateChangedEventArgs.PreviousState">
            <summary>
            The previous state.
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.AnimatedSurface.AnimationStateChangedEventArgs.NewState">
            <summary>
            The new state.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.AnimatedSurface.AnimationStateChangedEventArgs.#ctor(SadConsole.Surfaces.AnimatedSurface.AnimationState,SadConsole.Surfaces.AnimatedSurface.AnimationState)">
            <summary>
            Creates a new instance of the event args.
            </summary>
            <param name="previousState">The previous state.</param>
            <param name="newState">The new state.</param>
        </member>
        <member name="T:SadConsole.Surfaces.AnimatedSurface.AnimationState">
            <summary>
            Represents what state the animation is in.
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.AnimatedSurface.AnimationState.Stopped">
            <summary>
            The animation has never been played or was forcibly stopped.
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.AnimatedSurface.AnimationState.Playing">
            <summary>
            The animation is currently playing.
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.AnimatedSurface.AnimationState.Restarted">
            <summary>
            The animation was either manually restarted or repeated.
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.AnimatedSurface.AnimationState.Finished">
            <summary>
            The animation was played and completed.
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.AnimatedSurface.AnimationState.Activated">
            <summary>
            The animation is now the current animation for an entity.
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.AnimatedSurface.AnimationState.Deactivated">
            <summary>
            The animation is no longer the current animation for an entity.
            </summary>
        </member>
        <member name="T:SadConsole.Surfaces.BasicSurface">
            <summary>
            The base class for a text surface. Provides code for the view port and basic cell access.
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.BasicSurface.cells">
            <summary>
            An array of all cells in this surface.
            </summary>
            <remarks>This array is calculated internally and its size shouldn't be modified. Use the <see cref="F:SadConsole.Surfaces.BasicSurface.width"/> and <see cref="F:SadConsole.Surfaces.BasicSurface.height"/> properties instead. The cell data can be changed.</remarks>
        </member>
        <member name="F:SadConsole.Surfaces.BasicSurface.width">
            <summary>
            The width of the surface.
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.BasicSurface.height">
            <summary>
            The height of the surface.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.BasicSurface.DefaultForeground">
            <summary>
            The default foreground for glyphs on this surface.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.BasicSurface.DefaultBackground">
            <summary>
            The default background for glyphs on this surface.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.BasicSurface.Width">
            <summary>
            How many cells wide the surface is.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.BasicSurface.Height">
            <summary>
            How many cells high the surface is.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.BasicSurface.Cells">
            <summary>
            All cells of the surface.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.BasicSurface.Item(System.Int32,System.Int32)">
            <summary>
            Gets a cell based on its coordinates on the surface.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <returns>The indicated cell.</returns>
        </member>
        <member name="P:SadConsole.Surfaces.BasicSurface.Item(System.Int32)">
            <summary>
            Gets a cell by index.
            </summary>
            <param name="index">The index of the cell.</param>
            <returns>The indicated cell.</returns>
        </member>
        <member name="P:SadConsole.Surfaces.BasicSurface.CellCount">
            <summary>
            The total cells for this surface.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.BasicSurface.Font">
            <summary>
            Font used with rendering.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.BasicSurface.AbsoluteArea">
            <summary>
            Pixel area of the render cells.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.BasicSurface.RenderRects">
            <summary>
            Destination rectangles for rendering.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.BasicSurface.RenderCells">
            <summary>
            Cells that will be rendered.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.BasicSurface.Tint">
            <summary>
            A tint used in rendering.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.BasicSurface.RenderArea">
            <summary>
            Sets the area of the text surface that should be rendered.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.BasicSurface.IsDirty">
            <summary>
            Indicates the surface has changed and needs to be rendered.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.BasicSurface.LastRenderResult">
            <summary>
            The last texture render pass for this surface.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.BasicSurface.OnIsDirty">
            <summary>
            A callback that happens when <see cref="P:SadConsole.Surfaces.BasicSurface.IsDirty"/> is set to true.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.BasicSurface.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new text surface with the specified width and height.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">THe height of the surface.</param>
        </member>
        <member name="M:SadConsole.Surfaces.BasicSurface.Finalize">
            <summary>
            Disposes <see cref="P:SadConsole.Surfaces.BasicSurface.LastRenderResult"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.BasicSurface.#ctor(System.Int32,System.Int32,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Creates a new text surface with the specified width and height.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">The height of the surface.</param>
            <param name="renderArea">Initial value for the <see cref="P:SadConsole.Surfaces.BasicSurface.RenderArea"/> view.</param>
        </member>
        <member name="M:SadConsole.Surfaces.BasicSurface.#ctor(System.Int32,System.Int32,SadConsole.Font)">
            <summary>
            Creates a new text surface with the specified width and height.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">The height of the surface.</param>
            <param name="font">The font used with rendering.</param>
        </member>
        <member name="M:SadConsole.Surfaces.BasicSurface.#ctor(System.Int32,System.Int32,SadConsole.Font,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Creates a new text surface with the specified width and height.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">The height of the surface.</param>
            <param name="font">The font used with rendering.</param>
            <param name="renderArea">Initial value for the <see cref="P:SadConsole.Surfaces.BasicSurface.RenderArea"/> view.</param>
        </member>
        <member name="M:SadConsole.Surfaces.BasicSurface.#ctor(System.Int32,System.Int32,SadConsole.Cell[],SadConsole.Font,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Creates a new text surface with the specified width, height, and initial set of cell data.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">The height of the surface.</param>
            <param name="font">The font used with rendering.</param>
            <param name="initialCells">Seeds the cells with existing values. Array size must match <paramref name="width"/> * <paramref name="height"/>.</param>
            <param name="renderArea">Initial value for the <see cref="P:SadConsole.Surfaces.BasicSurface.RenderArea"/> view.</param>
        </member>
        <member name="M:SadConsole.Surfaces.BasicSurface.#ctor">
            <summary>
            Initialization is left to the derived class.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.BasicSurface.InitializeCells">
            <summary>
            Sets <see cref="P:SadConsole.Surfaces.BasicSurface.RenderCells"/> to <see cref="!:TextSurfaceBasic.cells"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.BasicSurface.SetRenderCells">
            <summary>
            Calculates which cells to draw based on <see cref="P:SadConsole.Surfaces.BasicSurface.RenderArea"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.BasicSurface.Save(System.String)">
            <summary>
            Saves the <see cref="T:SadConsole.Surfaces.BasicSurface"/> to a file.
            </summary>
            <param name="file">The destination file.</param>
        </member>
        <member name="M:SadConsole.Surfaces.BasicSurface.Load(System.String)">
            <summary>
            Loads a <see cref="T:SadConsole.Surfaces.BasicSurface"/> from a file.
            </summary>
            <param name="file">The source file.</param>
            <returns></returns>
        </member>
        <member name="T:SadConsole.Surfaces.ISurface">
            <summary>
            Basic information about a text surface.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.ISurface.Width">
            <summary>
            The width of the surface.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.ISurface.Height">
            <summary>
            The height of the surface.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.ISurface.DefaultBackground">
            <summary>
            The default background of the surface. Some operations take this into account.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.ISurface.DefaultForeground">
            <summary>
            The default foreground of the surface. Some operations take this into account.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.ISurface.Cells">
            <summary>
            Each cell of the surface.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.ISurface.IsDirty">
            <summary>
            When true, indicates this surface needs to be redrawn.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.ISurface.LastRenderResult">
            <summary>
            Texture to hold the last render state of the surface.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.ISurface.AbsoluteArea">
            <summary>
            In pixels, how much area of the screen this surface covers.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.ISurface.RenderRects">
            <summary>
            Each screen rectangle for <see cref="!:ISurfaceData.Cells"/> used in rendering.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.ISurface.RenderCells">
            <summary>
            The cells used for rendering if the <see cref="P:SadConsole.Surfaces.ISurface.RenderArea"/> is not the entire text surface.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.ISurface.Font">
            <summary>
            Font used for rendering.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.ISurface.Tint">
            <summary>
            An optional color tint applied after rendering. Recolors the entire surface. Use <see cref="P:Microsoft.Xna.Framework.Color.Transparent"/> to disable this.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.ISurface.RenderArea">
            <summary>
            A view of the <see cref="!:ISurfaceData.Cells"/> which changes which cells will be drawn.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.ISurface.Item(System.Int32)">
            <summary>
            Gets a cell by index.
            </summary>
            <param name="index">Index from the <see cref="P:SadConsole.Surfaces.ISurface.Cells"/> array.</param>
            <returns>The cell.</returns>
        </member>
        <member name="P:SadConsole.Surfaces.ISurface.Item(System.Int32,System.Int32)">
            <summary>
            Gets a cell by coordinates
            </summary>
            <param name="x">The x coordinate in the surface.</param>
            <param name="y">The y coordinate in the surface.</param>
            <returns>The cell.</returns>
        </member>
        <member name="T:SadConsole.Surfaces.LayeredSurface">
            <summary>
            Text surface with multiple layers.
            </summary>
        </member>
        <member name="T:SadConsole.Surfaces.LayeredSurface.Layer">
            <summary>
            A layer.
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.LayeredSurface.Layer.Cells">
            <summary>
            All cells of the layer.
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.LayeredSurface.Layer.RenderCells">
            <summary>
            The cells that will be rendered.
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.LayeredSurface.Layer.IsVisible">
            <summary>
            When true, the layer will be drawn.
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.LayeredSurface.Layer.Metadata">
            <summary>
            Custom object.
            </summary>
        </member>
        <member name="F:SadConsole.Surfaces.LayeredSurface.Layer.Index">
            <summary>
            The index of the layer.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.LayeredSurface.Layer.ToTextSurface(System.Int32,System.Int32,SadConsole.Font)">
            <summary>
            Converts the layer data into a <see cref="!:TextSurface"/>.
            </summary>
            <param name="width">Target width of the <see cref="!:TextSurface"/>.</param>
            <param name="height">Target height of the <see cref="!:TextSurface"/>.</param>
            <param name="font">Target font of the <see cref="!:TextSurface"/>.</param>
            <returns>A new <see cref="!:TextSurface"/> seeded by this layer data.</returns>
        </member>
        <member name="F:SadConsole.Surfaces.LayeredSurface.layers">
            <summary>
            Layers for the surface.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.LayeredSurface.LayerCount">
            <summary>
            Count of layers.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.LayeredSurface.ActiveLayerIndex">
            <summary>
            The current zero-based active layer index.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.LayeredSurface.ActiveLayer">
            <summary>
            Gets the active layer.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.LayeredSurface.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new layer text surface with the default <see cref="T:SadConsole.Font"/>.
            </summary>
            <param name="width">Width of the layers.</param>
            <param name="height">Height of the layers.</param>
            <param name="layers">The count of layers.</param>
        </member>
        <member name="M:SadConsole.Surfaces.LayeredSurface.#ctor(System.Int32,System.Int32,Microsoft.Xna.Framework.Rectangle,System.Int32)">
            <summary>
            Creates a new layer text surface with the default <see cref="T:SadConsole.Font"/>.
            </summary>
            <param name="width">Width of the layers.</param>
            <param name="height">Height of the layers.</param>
            <param name="renderArea">Viewable part of the surface.</param>
            <param name="layers">The count of layers.</param>
        </member>
        <member name="M:SadConsole.Surfaces.LayeredSurface.#ctor(System.Int32,System.Int32,SadConsole.Font,System.Int32)">
            <summary>
            Creates a new layer text surface with the specified font.
            </summary>
            <param name="width">Width of the layers.</param>
            <param name="height">Height of the layers.</param>
            <param name="layers">The count of layers.</param>
            <param name="font">The font.</param>
        </member>
        <member name="M:SadConsole.Surfaces.LayeredSurface.#ctor(System.Int32,System.Int32,SadConsole.Font,Microsoft.Xna.Framework.Rectangle,System.Int32)">
            <summary>
            Creates a new layer text surface with the specified font.
            </summary>
            <param name="width">Width of the layers.</param>
            <param name="height">Height of the layers.</param>
            <param name="layers">The count of layers.</param>
            <param name="renderArea">Viewable part of the surface.</param>
            <param name="font">The font.</param>
        </member>
        <member name="M:SadConsole.Surfaces.LayeredSurface.SetActiveLayer(System.Int32)">
            <summary>
            Changes the active layer, which sets the current cell data for <see cref="!:ITextSurfaceRendered"/>.
            </summary>
            <param name="index">The zero-based index of the layer.</param>
        </member>
        <member name="M:SadConsole.Surfaces.LayeredSurface.SetActiveLayer(SadConsole.Surfaces.LayeredSurface.Layer)">
            <summary>
            Changes the active layer, which sets the current cell data for <see cref="!:ITextSurfaceRendered"/>.
            </summary>
            <param name="layer">The layer to set active.</param>
        </member>
        <member name="M:SadConsole.Surfaces.LayeredSurface.InitializeCells">
            <summary>
            Sets up all the cells of a layer for the first time.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.LayeredSurface.InitializeLayer(SadConsole.Surfaces.LayeredSurface.Layer)">
            <summary>
            Initializes a layers cells.
            </summary>
            <param name="layer">The layer to setup.</param>
        </member>
        <member name="M:SadConsole.Surfaces.LayeredSurface.SetRenderCells">
            <summary>
            Calculates which cells to draw based on <see cref="P:SadConsole.Surfaces.BasicSurface.RenderArea"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.LayeredSurface.ResetAreaLayer(SadConsole.Surfaces.LayeredSurface.Layer)">
            <summary>
            Sets up the layers render cells.
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:SadConsole.Surfaces.LayeredSurface.GetLayers">
            <summary>
            Gets all of the layers.
            </summary>
            <returns>The layers.</returns>
        </member>
        <member name="M:SadConsole.Surfaces.LayeredSurface.Add">
            <summary>
            Adds a new layer.
            </summary>
            <returns>The created layer.</returns>
        </member>
        <member name="M:SadConsole.Surfaces.LayeredSurface.Add(SadConsole.Surfaces.ISurface)">
            <summary>
            Creates and adds a new layer based on an existing surface.
            </summary>
            <param name="surface">The surface. Must be the same width/height of this </param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Surfaces.LayeredSurface.Remove(SadConsole.Surfaces.LayeredSurface.Layer)">
            <summary>
            Removes a layer.
            </summary>
            <param name="layer">The layer to remove.</param>
        </member>
        <member name="M:SadConsole.Surfaces.LayeredSurface.Remove(System.Int32)">
            <summary>
            Removes a layer.
            </summary>
            <param name="index">The layer index to remove.</param>
        </member>
        <member name="M:SadConsole.Surfaces.LayeredSurface.Move(SadConsole.Surfaces.LayeredSurface.Layer,System.Int32)">
            <summary>
            Moves a layer to the specified index.
            </summary>
            <param name="layer">The layer to check.</param>
            <param name="index">The new index of the layer.</param>
        </member>
        <member name="M:SadConsole.Surfaces.LayeredSurface.MoveToTop(SadConsole.Surfaces.LayeredSurface.Layer)">
            <summary>
            Moves a layer to the top.
            </summary>
            <param name="layer">The layer to check.</param>
        </member>
        <member name="M:SadConsole.Surfaces.LayeredSurface.MoveToBottom(SadConsole.Surfaces.LayeredSurface.Layer)">
            <summary>
            Moves a layer to the bottom.
            </summary>
            <param name="layer">The layer to check.</param>
        </member>
        <member name="M:SadConsole.Surfaces.LayeredSurface.IndexOf(SadConsole.Surfaces.LayeredSurface.Layer)">
            <summary>
            Gets the index of a layer.
            </summary>
            <param name="layer">The layer to check.</param>
            <returns>The index of the layer.</returns>
        </member>
        <member name="M:SadConsole.Surfaces.LayeredSurface.GetLayer(System.Int32)">
            <summary>
            Gets a specific layer.
            </summary>
            <param name="index">The zero-based layer to get.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Surfaces.LayeredSurface.Save(System.String,System.Type)">
            <summary>
            Saves the <see cref="T:SadConsole.Surfaces.LayeredSurface"/> to a file.
            </summary>
            <param name="file">The destination file.</param>
            <param name="layerMetadataType">Type of <see cref="F:SadConsole.Surfaces.LayeredSurface.Layer.Metadata"/>.</param>
        </member>
        <member name="M:SadConsole.Surfaces.LayeredSurface.Load(System.String,System.Type)">
            <summary>
            Loads a <see cref="T:SadConsole.Surfaces.LayeredSurface"/> from a file.
            </summary>
            <param name="file">The source file.</param>
            <param name="layerMetadataType">Type of <see cref="F:SadConsole.Surfaces.LayeredSurface.Layer.Metadata"/>.</param>
            <returns>The <see cref="T:SadConsole.Surfaces.LayeredSurface"/>The deserialized surface.</returns>
        </member>
        <member name="M:SadConsole.Surfaces.LayeredSurface.Load(System.String)">
            <summary>
            Loads a <see cref="T:SadConsole.Surfaces.LayeredSurface"/> from a file using the <see cref="T:SadConsole.Surfaces.LayerMetadata"/> type for metadata.
            </summary>
            <param name="file">The source file.</param>
            <returns>The <see cref="T:SadConsole.Surfaces.LayeredSurface"/>The deserialized surface.</returns>
        </member>
        <member name="M:SadConsole.Surfaces.LayeredSurface.SyncLayerIndex">
            <summary>
            Sets the <see cref="F:SadConsole.Surfaces.LayeredSurface.Layer.Index"/> of each layer to the index it appears in the <see cref="F:SadConsole.Surfaces.LayeredSurface.layers"/>.
            </summary>
        </member>
        <member name="T:SadConsole.Surfaces.NoDrawSurface">
            <summary>
            A <see cref="T:SadConsole.Surfaces.BasicSurface"/> that does not create a backing texture for rendering. Do not try to render.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.NoDrawSurface.FromSurface(SadConsole.Surfaces.ISurface)">
            <summary>
            Creates a new surface from an existing surface.
            </summary>
            <param name="surface">The original surface</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Surfaces.NoDrawSurface.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new text surface with the specified width and height.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">THe height of the surface.</param>
        </member>
        <member name="M:SadConsole.Surfaces.NoDrawSurface.#ctor(System.Int32,System.Int32,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Creates a new text surface with the specified width and height.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">The height of the surface.</param>
            <param name="renderArea">Initial value for the <see cref="P:SadConsole.Surfaces.BasicSurface.RenderArea"/> view.</param>
        </member>
        <member name="M:SadConsole.Surfaces.NoDrawSurface.#ctor(System.Int32,System.Int32,SadConsole.Font)">
            <summary>
            Creates a new text surface with the specified width and height.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">The height of the surface.</param>
            <param name="font">The font used with rendering.</param>
        </member>
        <member name="M:SadConsole.Surfaces.NoDrawSurface.#ctor(System.Int32,System.Int32,SadConsole.Font,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Creates a new text surface with the specified width and height.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">The height of the surface.</param>
            <param name="font">The font used with rendering.</param>
            <param name="renderArea">Initial value for the <see cref="P:SadConsole.Surfaces.BasicSurface.RenderArea"/> view.</param>
        </member>
        <member name="M:SadConsole.Surfaces.NoDrawSurface.#ctor(System.Int32,System.Int32,SadConsole.Font,Microsoft.Xna.Framework.Rectangle,SadConsole.Cell[])">
            <summary>
            Creates a new text surface with the specified width, height, and initial set of cell data.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">The height of the surface.</param>
            <param name="font">The font used with rendering.</param>
            <param name="initialCells">Seeds the cells with existing values. Array size must match <paramref name="width"/> * <paramref name="height"/>.</param>
            <param name="renderArea">Initial value for the <see cref="P:SadConsole.Surfaces.BasicSurface.RenderArea"/> view.</param>
        </member>
        <member name="M:SadConsole.Surfaces.NoDrawSurface.SetRenderCells">
            <summary>
            Calculates which cells to draw based on <see cref="P:SadConsole.Surfaces.BasicSurface.RenderArea"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.NoDrawSurface.Save(System.String)">
            <summary>
            Saves the <see cref="T:SadConsole.Surfaces.NoDrawSurface"/> to a file.
            </summary>
            <param name="file">The destination file.</param>
        </member>
        <member name="M:SadConsole.Surfaces.NoDrawSurface.Load(System.String)">
            <summary>
            Loads a <see cref="T:SadConsole.Surfaces.NoDrawSurface"/> from a file.
            </summary>
            <param name="file">The source file.</param>
            <returns></returns>
        </member>
        <member name="T:SadConsole.Surfaces.SurfaceView">
            <summary>
            A sub-view of an existing surface. Treated as it's own surface though, it shares the cell data with the original surface.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.SurfaceView.Item(System.Int32)">
            <summary>
            Gets a cell by index.
            </summary>
            <param name="index">The index of the cell.</param>
            <returns>The indicated cell.</returns>
        </member>
        <member name="P:SadConsole.Surfaces.SurfaceView.Item(System.Int32,System.Int32)">
            <summary>
            Gets a cell based on its coordinates on the surface.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <returns>The indicated cell.</returns>
        </member>
        <member name="P:SadConsole.Surfaces.SurfaceView.AbsoluteArea">
            <summary>
            Total area in pixels of this surface view.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.SurfaceView.Cells">
            <summary>
            All cells of the view.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.SurfaceView.DefaultBackground">
            <summary>
            The default background color.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.SurfaceView.DefaultForeground">
            <summary>
            The default foreground color.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.SurfaceView.Font">
            <summary>
            The font used for rendering.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.SurfaceView.Height">
            <summary>
            The height of the view.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.SurfaceView.RenderArea">
            <summary>
            Internal only.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.SurfaceView.RenderCells">
            <summary>
            Cells that will be rendered.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.SurfaceView.RenderRects">
            <summary>
            Destination rectangles for rendering.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.SurfaceView.Tint">
            <summary>
            A tint used in rendering.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.SurfaceView.Width">
            <summary>
            The width of the view.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.SurfaceView.ViewArea">
            <summary>
            The area of the original surface to use in this view.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.SurfaceView.IsDirty">
            <summary>
            Indicates the surface has changed and needs to be rendered.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.SurfaceView.LastRenderResult">
            <summary>
            The last texture render pass for this surface.
            </summary>
        </member>
        <member name="P:SadConsole.Surfaces.SurfaceView.OnIsDirty">
            <summary>
            A callback that happens when <see cref="P:SadConsole.Surfaces.SurfaceView.IsDirty"/> is set to true.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceView.#ctor(SadConsole.Surfaces.ISurface,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Creates a new surface view from an existing surface.
            </summary>
            <param name="surface">The source cell data.</param>
            <param name="area">The area of the text surface.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceView.Finalize">
            <summary>
            Disposes <see cref="P:SadConsole.Surfaces.SurfaceView.LastRenderResult"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceView.SetRenderCells">
            <summary>
            Calculates which cells to draw based on <see cref="P:SadConsole.Surfaces.SurfaceView.RenderArea"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceView.Hydrate(SadConsole.Surfaces.ISurface)">
            <summary>
            Call after the <see cref="T:SadConsole.Surfaces.SurfaceView"/> is deserialized to hook it back up to the original surface.
            </summary>
            <param name="surface">The surface to associate with the view.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceView.Hydrate(SadConsole.Surfaces.ISurface,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Call after the <see cref="T:SadConsole.Surfaces.SurfaceView"/> is deserialized to hook it back up to the original surface.
            </summary>
            <param name="surface">The surface to associate with the view.</param>
            <param name="view">The sub view of the <paramref name="surface"/>.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceView.Save(System.String)">
            <summary>
            Saves the serialized <see cref="T:SadConsole.Surfaces.SurfaceView"/> to a file.
            </summary>
            <param name="file">The destination file.</param>
        </member>
        <member name="M:SadConsole.Surfaces.SurfaceView.Load(System.String,SadConsole.Surfaces.ISurface)">
            <summary>
            Loads a <see cref="T:SadConsole.Surfaces.SurfaceView"/> from a file and existing <see cref="T:SadConsole.Surfaces.ISurface"/>.
            </summary>
            <param name="file">The source file.</param>
            <param name="surfaceHydrate">The surface this view was originally from.</param>
            <returns>A surface view.</returns>
        </member>
        <member name="T:SadConsole.Themes.ProgressBarTheme">
            <summary>
            The theme of a radio button control.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ProgressBarTheme.Background">
            <summary>
            The theme of the unprogressed part of the bar.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ProgressBarTheme.Foreground">
            <summary>
            The theme of the progressed part of the bar.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.ProgressBarTheme.Clone">
            <summary>
            Returns a clone of this object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="T:SadConsole.Themes.ButtonTheme">
            <summary>
            The theme of the button control
            </summary>
        </member>
        <member name="M:SadConsole.Themes.ButtonTheme.Clone">
            <summary>
            Returns a clone of this object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="T:SadConsole.Themes.CheckBoxTheme">
            <summary>
            The theme of a checkbox control.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.CheckBoxTheme.Button">
            <summary>
            The theme part for the button icon.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.CheckBoxTheme.CheckedIcon">
            <summary>
            The icon displayed when the radio button is checked.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.CheckBoxTheme.UncheckedIcon">
            <summary>
            The icon displayed when the radio button is checked.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.CheckBoxTheme.Clone">
            <summary>
            Returns a clone of this object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="T:SadConsole.Themes.ControlsConsoleTheme">
            <summary>
            A theme for a Window object.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ControlsConsoleTheme.FillStyle">
            <summary>
            The style of of the console surface.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.ControlsConsoleTheme.Clone">
            <summary>
            Returns a clone of this object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="T:SadConsole.Themes.InputBoxTheme">
            <summary>
            A theme for the input box control.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.InputBoxTheme.CarrotEffect">
            <summary>
            The style to use for the carrot.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.InputBoxTheme.Clone">
            <summary>
            Returns a clone of this object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="T:SadConsole.Themes.Library">
            <summary>
            The library of themes. Holds the themes of all controls.
            </summary>
        </member>
        <member name="P:SadConsole.Themes.Library.Default">
            <summary>
            If a control does not specify its own theme, the theme from this property will be used.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.Library.ButtonTheme">
            <summary>
            Theme for the <see cref="T:SadConsole.Controls.Button"/> control.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.Library.SelectionButtonTheme">
            <summary>
            Theme for the <see cref="T:SadConsole.Controls.SelectionButton"/> control.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.Library.WindowTheme">
            <summary>
            Theme for the <see cref="!:SadConsole.Consoles.Window"/> control.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.Library.ScrollBarTheme">
            <summary>
            Theme for the <see cref="T:SadConsole.Controls.ScrollBar"/> control.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.Library.RadioButtonTheme">
            <summary>
            Theme for the <see cref="T:SadConsole.Controls.RadioButton"/> control.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.Library.ListBoxTheme">
            <summary>
            Theme for the <see cref="T:SadConsole.Controls.ListBox"/> control.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.Library.CheckBoxTheme">
            <summary>
            Theme for the <see cref="T:SadConsole.Controls.CheckBox"/> control.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.Library.InputBoxTheme">
            <summary>
            Theme for the <see cref="T:SadConsole.Controls.InputBox"/> control.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.Library.ProgressBarTheme">
            <summary>
            Theme for the <see cref="T:SadConsole.Controls.ProgressBar"/> control.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.Library.ControlsConsoleTheme">
            <summary>
            Theme for <see cref="!:Consoles.ControlsConsole"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.Library.#ctor">
            <summary>
            Creates a new instance of the theme library with default themes.
            </summary>
        </member>
        <member name="T:SadConsole.Themes.ListBoxTheme">
            <summary>
            The theme for a ListBox control.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ListBoxTheme.Border">
            <summary>
            The appearance of the border.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ListBoxTheme.Item">
            <summary>
            The appearance of an item.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ListBoxTheme.ScrollBarTheme">
            <summary>
            The appearance of the scrollbar used by the listbox control.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.ListBoxTheme.Clone">
            <summary>
            Returns a clone of this object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="T:SadConsole.Themes.RadioButtonTheme">
            <summary>
            The theme of a radio button control.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.RadioButtonTheme.Button">
            <summary>
            The theme part for the button icon.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.RadioButtonTheme.CheckedIcon">
            <summary>
            The icon displayed when the radio button is checked.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.RadioButtonTheme.UncheckedIcon">
            <summary>
            The icon displayed when the radio button is checked.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.RadioButtonTheme.Clone">
            <summary>
            Returns a clone of this object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="T:SadConsole.Themes.ScrollBarTheme">
            <summary>
            The theme of the slider control.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ScrollBarTheme.Ends">
            <summary>
            The theme part for the ends of the scroll bar.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ScrollBarTheme.Bar">
            <summary>
            The theme part for the scroll bar bar where the slider is not located.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ScrollBarTheme.Slider">
            <summary>
            The theme part for the scroll bar icon.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.ScrollBarTheme.Clone">
            <summary>
            Returns a clone of this object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="T:SadConsole.Themes.ThemePartBase">
            <summary>
            The base class for a theme part or a simple theme.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ThemePartBase.Normal">
            <summary>
            The normal appearance of the control.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ThemePartBase.Focused">
            <summary>
            The appearance of the control when it is focused.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ThemePartBase.MouseOver">
            <summary>
            The appearance of the control when the mouse is over it.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ThemePartBase.Disabled">
            <summary>
            The appearance of the control when it is disabled.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.ThemePartBase.Clone">
            <summary>
            Clones this object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="T:SadConsole.Themes.ThemePartClickable">
            <summary>
            Defines the theme of a control that can be clicked.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ThemePartClickable.MouseClicking">
            <summary>
            The appearance of the control when the mouse button is held down over it.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.ThemePartClickable.Clone">
            <summary>
            Clones the object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="T:SadConsole.Themes.ThemePartSelected">
            <summary>
            Defines the theme of a control who has a selection state.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ThemePartSelected.Selected">
            <summary>
            The style of the selected part of the control.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.ThemePartSelected.Clone">
            <summary>
            Clones this object.
            </summary>
            <returns>The cloned theme.</returns>
        </member>
        <member name="T:SadConsole.Themes.WindowTheme">
            <summary>
            A theme for a Window object.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.WindowTheme.TitleStyle">
            <summary>
            The style of the title.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.WindowTheme.BorderStyle">
            <summary>
            The style of the border
            </summary>
        </member>
        <member name="F:SadConsole.Themes.WindowTheme.FillStyle">
            <summary>
            The style of window space inside the border.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.WindowTheme.ModalTint">
            <summary>
            The color to tint the background when the window is shown as modal.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.WindowTheme.Clone">
            <summary>
            Returns a clone of this object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="T:SadConsole.Timer">
            <summary>
            A simple timer with callback.
            </summary>
        </member>
        <member name="F:SadConsole.Timer.TriggeredCallback">
            <summary>
            Callback to trigger when the time elapses.
            </summary>
        </member>
        <member name="P:SadConsole.Timer.Repeat">
            <summary>
            If true, the timer will restart when the time has elapsed.
            </summary>
        </member>
        <member name="P:SadConsole.Timer.TimerAmount">
            <summary>
            How many milliseconds to cause the timer to trigger.
            </summary>
        </member>
        <member name="P:SadConsole.Timer.IsOff">
            <summary>
            When true, the timer does not count time.
            </summary>
        </member>
        <member name="M:SadConsole.Timer.#ctor(System.Double,System.Action{SadConsole.Timer,System.Double})">
            <summary>
            Creates a new timer.
            </summary>
            <param name="triggerTime">How many milliseconds to trigger the callback.</param>
            <param name="callback">The callback that is called when the trigger time has passed.</param>
        </member>
        <member name="M:SadConsole.Timer.Update(System.Double)">
            <summary>
            Updates the timer with the time since the last call.
            </summary>
            <param name="timeElapsed"></param>
        </member>
        <member name="M:SadConsole.Timer.Restart">
            <summary>
            Restarts the timer; sets <see cref="P:SadConsole.Timer.IsOff"/> to false.
            </summary>
        </member>
        <member name="T:SadConsole.SerializedTypes.GameObjectSerialized">
            <summary>
            Serialized instance of a <see cref="!:GameObject"/>.
            </summary>
        </member>
        <member name="T:SadConsole.SerializedTypes.SceneSerialized">
            <summary>
            Serialized instance of a <see cref="T:SadConsole.GameHelpers.Scene"/> object.
            </summary>
        </member>
        <member name="T:SadConsole.Side">
            <summary>
            A side value.
            </summary>
        </member>
        <member name="F:SadConsole.Side.Left">
            <summary>
            The left side.
            </summary>
        </member>
        <member name="F:SadConsole.Side.Top">
            <summary>
            The top side.
            </summary>
        </member>
        <member name="F:SadConsole.Side.Right">
            <summary>
            The right side.
            </summary>
        </member>
        <member name="F:SadConsole.Side.Bottom">
            <summary>
            The bottom side.
            </summary>
        </member>
        <member name="P:SadConsole.Global.Fonts">
            <summary>
            Collection of fonts. Used mainly by the deserialization system.
            </summary>
        </member>
        <member name="F:SadConsole.Global.FontDefault">
            <summary>
            The default font for any type that does not provide a font.
            </summary>
        </member>
        <member name="F:SadConsole.Global.GraphicsDevice">
            <summary>
            The MonoGame graphics device.
            </summary>
        </member>
        <member name="F:SadConsole.Global.GraphicsDeviceManager">
            <summary>
            The MonoGame graphics device manager.
            </summary>
        </member>
        <member name="F:SadConsole.Global.SpriteBatch">
            <summary>
            A global reusable sprite batch.
            </summary>
        </member>
        <member name="F:SadConsole.Global.CurrentScreen">
            <summary>
            The active screen processed by the game.
            </summary>
        </member>
        <member name="F:SadConsole.Global.FocusedConsoles">
            <summary>
            The stack of consoles that will receive keyboard and mouse input.
            </summary>
        </member>
        <member name="F:SadConsole.Global.Random">
            <summary>
            A global random number generator.
            </summary>
        </member>
        <member name="F:SadConsole.Global.GameTimeElapsedUpdate">
            <summary>
            The elapsed time from the update call. The value is from <see cref="F:SadConsole.Global.GameTimeUpdate"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Global.GameTimeElapsedRender">
            <summary>
            The elapsed time from the render call. The value is from <see cref="F:SadConsole.Global.GameTimeRender"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Global.GameTimeUpdate">
            <summary>
            The <see cref="T:Microsoft.Xna.Framework.GameTime"/> object from the update pass.
            </summary>
        </member>
        <member name="F:SadConsole.Global.GameTimeRender">
            <summary>
            The <see cref="T:Microsoft.Xna.Framework.GameTime"/> object from the render pass.
            </summary>
        </member>
        <member name="F:SadConsole.Global.MouseState">
            <summary>
            Mouse state which is usually updated in the update pass.
            </summary>
        </member>
        <member name="F:SadConsole.Global.KeyboardState">
            <summary>
            Keyboard state which is usually updated in the update pass.
            </summary>
        </member>
        <member name="F:SadConsole.Global.RenderOutput">
            <summary>
            The render target of SadConsole. This is generally rendered to the screen as the final step of drawing.
            </summary>
        </member>
        <member name="P:SadConsole.Global.RenderWidth">
            <summary>
            The width of the area to render on the game window.
            </summary>
        </member>
        <member name="P:SadConsole.Global.RenderHeight">
            <summary>
            The height of the area to render on the game window.
            </summary>
        </member>
        <member name="P:SadConsole.Global.WindowWidth">
            <summary>
            The current game window width.
            </summary>
        </member>
        <member name="P:SadConsole.Global.WindowHeight">
            <summary>
            The current game window height.
            </summary>
        </member>
        <member name="P:SadConsole.Global.RenderRect">
            <summary>
            Where on the screen the engine will be rendered.
            </summary>
        </member>
        <member name="P:SadConsole.Global.RenderScale">
            <summary>
            If the <see cref="P:SadConsole.Global.RenderRect"/> is stretched, this is the ratio difference between unstretched.
            </summary>
        </member>
        <member name="F:SadConsole.Global.DrawCalls">
            <summary>
            Draw calls to render to <see cref="F:SadConsole.Global.RenderOutput"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Global.LoadFont(System.String)">
            <summary>
            Loads a font from a file and adds it to the <see cref="P:SadConsole.Global.Fonts"/> collection.
            </summary>
            <param name="font">The font file to load.</param>
            <returns>A master font that you can generate a usable font from.</returns>
        </member>
        <member name="M:SadConsole.Global.ResetRendering">
            <summary>
            Resets the <see cref="F:SadConsole.Global.RenderOutput"/> target and determines the appropriate <see cref="P:SadConsole.Global.RenderRect"/> and <see cref="P:SadConsole.Global.RenderScale"/> based on the window or fullscreen state.
            </summary>
        </member>
        <member name="T:SadConsole.Game">
            <summary>
            A MonoGame <see cref="T:SadConsole.Game"/> instance that runs SadConsole. This is used when you don't provide one and call <see cref="!:Engine.Initialize(string, int, int)"/>.
            </summary>
        </member>
        <member name="T:SadConsole.Game.FPSCounterComponent">
            <summary>
            A component to draw how many frames per second the engine is performing at.
            </summary>
        </member>
        <member name="F:SadConsole.Game.OnUpdate">
            <summary>
            Called after each frame of update logic has happened.
            </summary>
        </member>
        <member name="F:SadConsole.Game.OnDraw">
            <summary>
            Called after a frame has been drawn.
            </summary>
        </member>
        <member name="F:SadConsole.Game.OnInitialize">
            <summary>
            Called when the device is created.
            </summary>
        </member>
        <member name="F:SadConsole.Game.OnDestroy">
            <summary>
            Called when the game is ending.
            </summary>
        </member>
        <member name="F:SadConsole.Game.ResizeBusy">
            <summary>
            Indicates the window is going to resize itself.
            </summary>
        </member>
        <member name="E:SadConsole.Game.WindowResized">
            <summary>
            Raised when the window is resized and the render area has been calculated.
            </summary>
        </member>
        <member name="T:SadConsole.IConsole">
            <summary>
            Supports basic console management and input functionallity.
            </summary>
        </member>
        <member name="P:SadConsole.IConsole.TextSurface">
            <summary>
            The surface of the console.
            </summary>
        </member>
        <member name="P:SadConsole.IConsole.VirtualCursor">
            <summary>
            A controllable cursor for the console.
            </summary>
        </member>
        <member name="P:SadConsole.IConsole.UsePixelPositioning">
            <summary>
            When true, changes the <see cref="!:Position"/> to be in pixels rather than cell coordinates.
            </summary>
        </member>
        <member name="P:SadConsole.IConsole.UseKeyboard">
            <summary>
            Allows this console to accept keyboard input.
            </summary>
        </member>
        <member name="P:SadConsole.IConsole.UseMouse">
            <summary>
            Allows this console to accept mouse input.
            </summary>
        </member>
        <member name="P:SadConsole.IConsole.IsExclusiveMouse">
            <summary>
            Gets or sets whether or not this console has exclusive access to the mouse events.
            </summary>
        </member>
        <member name="M:SadConsole.IConsole.LostMouse(SadConsole.Input.MouseConsoleState)">
            <summary>
            Called when the console had the mouse last frame but no longer has it.
            </summary>
        </member>
        <member name="M:SadConsole.IConsole.ProcessMouse(SadConsole.Input.MouseConsoleState)">
            <summary>
            Processes the mouse. If the mosue is over this console and the left button is clicked, this console will move to the top and become active focus of the engine.
            </summary>
            <param name="state"></param>
            <returns>True when the mouse is over this console.</returns>
        </member>
        <member name="M:SadConsole.IConsole.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Called by the engine to process the keyboard.
            </summary>
            <param name="state">Keyboard information.</param>
            <returns>True to signal that the keyboard was handled by this object.</returns>
        </member>
        <member name="P:SadConsole.IConsole.IsFocused">
            <summary>
            Sets or gets if the console has input focus.
            </summary>
        </member>
        <member name="T:SadConsole.Input.AsciiKey">
            <summary>
            Represents the state of a single key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.AsciiKey.Key">
            <summary>
            The key from MonoGame or XNA.
            </summary>
        </member>
        <member name="F:SadConsole.Input.AsciiKey.Character">
            <summary>
            The keyboard character of the key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.AsciiKey.TimeHeld">
            <summary>
            Total time the key has been held.
            </summary>
        </member>
        <member name="F:SadConsole.Input.AsciiKey.PreviouslyPressed">
            <summary>
            Tracks if the key was previously held when calcualting the <see cref="F:SadConsole.Input.Keyboard.InitialRepeatDelay"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.Fill(Microsoft.Xna.Framework.Input.Keys,System.Boolean)">
            <summary>
            Fills out the fields based on the MonoGame/XNA key.
            </summary>
            <param name="key">The key.</param>
            <param name="shiftPressed">Helps identify which <see cref="F:SadConsole.Input.AsciiKey.Character"/> to use while the key is pressed. For example, if <see cref="F:Microsoft.Xna.Framework.Input.Keys.A"/> is used the <see cref="F:SadConsole.Input.AsciiKey.Character"/> field will be either 'A' if <paramref name="shiftPressed"/> is true or 'a' if false.</param>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.Get(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Shortcut to get the <see cref="T:SadConsole.Input.AsciiKey"/> for a specific MonoGame/XNA <see cref="T:Microsoft.Xna.Framework.Input.Keys"/> type. Shift is considered not pressed.
            </summary>
            <param name="key">The key.</param>
            <returns>The <see cref="T:SadConsole.Input.AsciiKey"/> of the <see cref="T:Microsoft.Xna.Framework.Input.Keys"/>.</returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.Get(Microsoft.Xna.Framework.Input.Keys,System.Boolean)">
            <summary>
            Shortcut to get the <see cref="T:SadConsole.Input.AsciiKey"/> for a specific MonoGame/XNA <see cref="T:Microsoft.Xna.Framework.Input.Keys"/> type.
            </summary>
            <param name="key">The key.</param>
            <param name="shiftPressed">If shift should be considered pressed or not.</param>
            <returns>The <see cref="T:SadConsole.Input.AsciiKey"/> of the <see cref="T:Microsoft.Xna.Framework.Input.Keys"/>.</returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.op_Equality(SadConsole.Input.AsciiKey,SadConsole.Input.AsciiKey)">
            <summary>
            Checks if the two <see cref="T:SadConsole.Input.AsciiKey"/> types use the same <see cref="F:SadConsole.Input.AsciiKey.Key"/> if the <see cref="F:SadConsole.Input.AsciiKey.Character"/> is 0. If the <see cref="F:SadConsole.Input.AsciiKey.Character"/> is not 0, the <see cref="F:SadConsole.Input.AsciiKey.Character"/> is compared.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.op_Inequality(SadConsole.Input.AsciiKey,SadConsole.Input.AsciiKey)">
            <summary>
            Compares if the <see cref="F:SadConsole.Input.AsciiKey.Character"/> field of two <see cref="T:SadConsole.Input.AsciiKey"/> instances are the same.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.Equals(System.Object)">
            <summary>
            Compares references.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:SadConsole.Input.ConsoleViewInputHandler.CanMoveWithRightButton">
            <summary>
            Allows the right-mouse button to drag the view around.
            </summary>
        </member>
        <member name="P:SadConsole.Input.ConsoleViewInputHandler.CanMoveWithLeftButton">
            <summary>
            Allows the left-mouse button to drag the view around.
            </summary>
        </member>
        <member name="P:SadConsole.Input.ConsoleViewInputHandler.CanMoveWithKeyboard">
            <summary>
            Allows the keyboard keys to move the view around.
            </summary>
        </member>
        <member name="P:SadConsole.Input.ConsoleViewInputHandler.MoveUpKey">
            <summary>
            Defines the key used to move the viewport up.
            </summary>
        </member>
        <member name="P:SadConsole.Input.ConsoleViewInputHandler.MoveDownKey">
            <summary>
            Defines the key used to move the viewport down.
            </summary>
        </member>
        <member name="P:SadConsole.Input.ConsoleViewInputHandler.MoveLeftKey">
            <summary>
            Defines the key used to move the viewport left.
            </summary>
        </member>
        <member name="P:SadConsole.Input.ConsoleViewInputHandler.MoveRightKey">
            <summary>
            Defines the key used to move the viewport right.
            </summary>
        </member>
        <member name="T:SadConsole.Input.Keyboard">
            <summary>
            Represents the state of the keyboard.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Keyboard.KeysPressed">
            <summary>
            A collection of keys registered as pressed which behaves like a command prompt when holding down keys. Uses the <see cref="F:SadConsole.Input.Keyboard.RepeatDelay"/> and <see cref="F:SadConsole.Input.Keyboard.InitialRepeatDelay"/> settings.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Keyboard.KeysDown">
            <summary>
            A collection of keys currently held down.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Keyboard.KeysReleased">
            <summary>
            A collection of keys that were just released this frame.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keyboard.RepeatDelay">
            <summary>
            How often a key is included in the <see cref="P:SadConsole.Input.Keyboard.KeysPressed"/> collection after the <see cref="F:SadConsole.Input.Keyboard.InitialRepeatDelay"/> time has passed.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keyboard.InitialRepeatDelay">
            <summary>
            The initial delay after a key is first pressed before it is included a second time (while held down) in the <see cref="P:SadConsole.Input.Keyboard.KeysPressed"/> collection.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Keyboard.Clear">
            <summary>
            Clears the <see cref="P:SadConsole.Input.Keyboard.KeysPressed"/>, <see cref="P:SadConsole.Input.Keyboard.KeysDown"/>, <see cref="P:SadConsole.Input.Keyboard.KeysReleased"/> collections.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyUp(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Returns true if the key is not in the <see cref="P:SadConsole.Input.Keyboard.KeysDown"/> collection.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key is not being pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyDown(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Returns true if the key is in the <see cref="P:SadConsole.Input.Keyboard.KeysDown"/> collection.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key is being pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyReleased(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Returns true when the key is in the <see cref="P:SadConsole.Input.Keyboard.KeysReleased"/> collection.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key was released this update frame.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyPressed(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Returns true when the key is in the <see cref="P:SadConsole.Input.Keyboard.KeysPressed"/> collection.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key was considered first pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Reads the keyboard state using the <see cref="T:Microsoft.Xna.Framework.GameTime"/> from the update frame.
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:SadConsole.Input.Keyboard.Process">
            <summary>
            Send the keyboard to the active console.
            </summary>
        </member>
        <member name="T:SadConsole.Input.Mouse">
            <summary>
            The state of the mouse.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.ScreenPosition">
            <summary>
            The pixel position of the mouse on the screen.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.LeftButtonDown">
            <summary>
            Indicates the left mouse button is currently being pressed.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.LeftClicked">
            <summary>
            Indicates the left mouse button was clicked. (Held and then released)
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.LeftDoubleClicked">
            <summary>
            Inidcates the left mouse button was double-clicked within one second.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.RightButtonDown">
            <summary>
            Indicates the right mouse button is currently being pressed.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.RightClicked">
            <summary>
            Indicates the right mouse button was clicked. (Held and then released)
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.RightDoubleClicked">
            <summary>
            Indicates the right mouse buttion was double-clicked within one second.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.ScrollWheelValue">
            <summary>
            The cumulative value of the scroll wheel. 
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.ScrollWheelValueChange">
            <summary>
            The scroll wheel value change between frames.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.IsOnScreen">
            <summary>
            Indicates that the mouse is currently within the bounds of the rendering area.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Mouse.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the state of the mouse.
            </summary>
            <param name="gameTime">Delta from last update.</param>
        </member>
        <member name="M:SadConsole.Input.Mouse.Clear">
            <summary>
            Clears the buttons, position, wheel information.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Mouse.Process">
            <summary>
            Builds information about the mouse state based on the <see cref="F:SadConsole.Global.FocusedConsoles"/> or <see cref="F:SadConsole.Global.CurrentScreen"/>. Should be called each frame.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Mouse.IsMouseOverConsole(SadConsole.IConsole)">
            <summary>
            Returns true when the mouse is currently over the provided console.
            </summary>
            <param name="console">The console to check.</param>
            <returns>True or false indicating if the mouse is over the console.</returns>
        </member>
        <member name="M:SadConsole.Input.Mouse.Clone">
            <summary>
            Clones this mouse into a new object.
            </summary>
            <returns>A clone.</returns>
        </member>
        <member name="F:SadConsole.Input.MouseConsoleState.Console">
            <summary>
            The console used to create this object.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseConsoleState.Mouse">
            <summary>
            The mouse state.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseConsoleState.Cell">
            <summary>
            The cell the mouse is over, from <see cref="F:SadConsole.Input.MouseConsoleState.Console"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseConsoleState.ConsolePosition">
            <summary>
            The position of the mouse on the <see cref="F:SadConsole.Input.MouseConsoleState.Console"/>, based on the <see cref="F:SadConsole.Input.MouseConsoleState.WorldPosition"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseConsoleState.CellPosition">
            <summary>
            The position of the <see cref="F:SadConsole.Input.MouseConsoleState.Cell"/>.  
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseConsoleState.WorldPosition">
            <summary>
            A screen-based location based on the <see cref="F:SadConsole.Input.MouseConsoleState.ConsolePosition"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseConsoleState.RelativePixelPosition">
            <summary>
            The <see cref="F:SadConsole.Input.MouseConsoleState.ConsolePosition"/> translated to pixels.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseConsoleState.IsOnConsole">
            <summary>
            Indicates that the mouse is within the bounds of <see cref="F:SadConsole.Input.MouseConsoleState.Console"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Input.MouseConsoleState.#ctor(SadConsole.IConsole,SadConsole.Input.Mouse)">
            <summary>
            Calculates a new <see cref="T:SadConsole.Input.MouseConsoleState"/> based on an <see cref="T:SadConsole.IConsole"/> and <see cref="F:SadConsole.Input.MouseConsoleState.Mouse"/> state.
            </summary>
            <param name="console">The console to process with the mouse state.</param>
            <param name="mouseData">The current mouse state.</param>
        </member>
        <member name="M:SadConsole.Input.MouseConsoleState.Clone">
            <summary>
            Creates a copy.
            </summary>
            <returns>A copy of this class instance.</returns>
        </member>
        <member name="T:SadConsole.Input.MouseEventArgs">
            <summary>
            Event arguments for mouse events.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseEventArgs.MouseState">
            <summary>
            The mouse state associated with a console.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.CodeInstruction.ID">
            <summary>
            Friendly ID to help track what this code instruction was created from since it cannot be fully serialized.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.CodeInstruction.CodeCallback">
            <summary>
            The code to execute when this instruction is run.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.CodeInstruction.Run">
            <summary>
            Runs this instruction.
            </summary>
        </member>
        <member name="T:SadConsole.Instructions.ConcurrentInstructions">
            <summary>
            
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DoubleInstruction.ID">
            <summary>
            Friendly ID to help track what this code instruction was created from since it cannot be fully serialized.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DoubleInstruction.DoubleAnimationObject">
            <summary>
            The code to execute when this instruction is run.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DoubleInstruction.CodeCallback">
            <summary>
            The code to execute when this instruction is run.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.DoubleInstruction.Run">
            <summary>
            Runs this instruction.
            </summary>
        </member>
        <member name="T:SadConsole.Instructions.DrawString">
            <summary>
            Draws a string to a console as if someone was typing.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DrawString.Text">
            <summary>
            Gets or sets the text to print.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DrawString.TotalTimeToPrint">
            <summary>
            Gets or sets the total time to take to write the string. Use zero for instant.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DrawString.Position">
            <summary>
            Gets or sets the position on the console to write the text.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DrawString.Cursor">
            <summary>
            Represents the cursor used in printing. Use this for styling and printing behavior.
            </summary>
        </member>
        <member name="T:SadConsole.Instructions.FadeTextSurfaceTint">
            <summary>
            Animates the change to the tint of a <see cref="!:SadConsole.Consoles.ITextSurfaceRendered"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.FadeTextSurfaceTint.Colors">
            <summary>
            The color to fade the tint to.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.FadeTextSurfaceTint.FadeAnimationSettings">
            <summary>
            Animation provider.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.FadeTextSurfaceTint.#ctor(SadConsole.Surfaces.ISurface,Microsoft.Xna.Framework.ColorGradient,System.TimeSpan)">
            <summary>
            Creates a new tint fade instruction.
            </summary>
            <param name="textSurface">The <see cref="!:Consoles.ITextSurfaceRendered.Tint"/> to fade.</param>
            <param name="colors">The gradient pattern to fade through.</param>
            <param name="duration">How long the fade takes.</param>
        </member>
        <member name="M:SadConsole.Instructions.FadeTextSurfaceTint.Run">
            <summary>
            Runs the instruction.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.FadeTextSurfaceTint.Reset">
            <summary>
            Starts the instruction over.
            </summary>
        </member>
        <member name="T:SadConsole.Instructions.InstructionBase`1">
            <summary>
            Base class for instructions that target and interact with an object.
            </summary>
            <typeparam name="TInstructedType">The type of object used with the instruction</typeparam>
        </member>
        <member name="P:SadConsole.Instructions.InstructionBase`1.Target">
            <summary>
            The target object to be used when the <see cref="!:Run"/> method is called.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase`1.#ctor(`0)">
            <summary>
            Creates a new instruction with the specified target object.
            </summary>
            <param name="targetObject">The object to target</param>
        </member>
        <member name="T:SadConsole.Instructions.InstructionBase">
            <summary>
            Base class for all instructions.
            </summary>
        </member>
        <member name="E:SadConsole.Instructions.InstructionBase.ExecutionFinished">
            <summary>
            Raised when the instruction completes.
            </summary>
        </member>
        <member name="E:SadConsole.Instructions.InstructionBase.ExecutionRepeating">
            <summary>
            Raised when the instruction completes but is going to repeat.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionBase.IsFinished">
            <summary>
            Flags the instruction as completed or not. If completed, the <see cref="E:SadConsole.Instructions.InstructionBase.ExecutionFinished"/> event will be raised.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionBase.RepeatCount">
            <summary>
            Indicates how many times this set will repeat. Counts down every run. If set to -1 it will repeat forever. As this represents how many times to repeat, setting this value to 1 would allow the instruction to execute twice, once for the original time, and again for the repeat counter of 1.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.Reset">
            <summary>
            Resets the Done flag.
            </summary>
            <remarks>On the base class, resets the <paramref name="Done"/> to false. Override this method to reset the derived class' counters and status flags for the instruction.</remarks>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.Repeat">
            <summary>
            Repeats the current instruction. Decrements the <see cref="P:SadConsole.Instructions.InstructionBase.RepeatCount"/> value (if applicable), and raises the <see cref="E:SadConsole.Instructions.InstructionBase.ExecutionRepeating"/> event. This method should be overridden in derived classes to customize how the object is reset for a repeat.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.Run">
            <summary>
            Executes the instruction. This base class method should be called from derived classes. If the Done property is set to true, will try to repeat if needed and will raise all appropriate events.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.OnExecutionFinished">
            <summary>
            Raises the FinishedExecuting event.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.OnExecutionRepeating">
            <summary>
            Fires the FinishedExecuting event.
            </summary>
        </member>
        <member name="T:SadConsole.Instructions.InstructionSet">
            <summary>
            A set of instructions to be executed sequentially.
            </summary>
        </member>
        <member name="F:SadConsole.Instructions.InstructionSet.Instructions">
            <summary>
            All instructions in this set.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionSet.Name">
            <summary>
            The name of this instruction to identify it apart from other instruction sets.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionSet.CurrentInstruction">
            <summary>
            Represents the current instruction if this set is currently executing.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.Reset">
            <summary>
            Resets each instruction's status so that it can be run again.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.Run">
            <summary>
            Runs the instruction set. Once all instructions are Done, this set will set the <see cref="!:Done"/> property will be set to true.
            </summary>
        </member>
        <member name="T:SadConsole.Instructions.Wait">
            <summary>
            Represents an instruction to pause for a specified duration.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.Wait.Duration">
            <summary>
            The duration of the wait.
            </summary>
        </member>
        <member name="T:SadConsole.IScreen">
            <summary>
            A visible screen object.
            </summary>
        </member>
        <member name="P:SadConsole.IScreen.Position">
            <summary>
            The top-left coordinate of the screen object.
            </summary>
        </member>
        <member name="P:SadConsole.IScreen.CalculatedPosition">
            <summary>
            The position of this screen relative to the parents.
            </summary>
        </member>
        <member name="P:SadConsole.IScreen.Children">
            <summary>
            Child screen objects related to this one.
            </summary>
        </member>
        <member name="P:SadConsole.IScreen.Parent">
            <summary>
            A parented screen object.
            </summary>
        </member>
        <member name="P:SadConsole.IScreen.IsVisible">
            <summary>
            Indicates this screen object is visible and should process <see cref="M:SadConsole.IScreen.Draw(System.TimeSpan)"/>.
            </summary>
        </member>
        <member name="P:SadConsole.IScreen.IsPaused">
            <summary>
            Indicates the screen object should not process <see cref="M:SadConsole.IScreen.Update(System.TimeSpan)"/>.
            </summary>
        </member>
        <member name="M:SadConsole.IScreen.Draw(System.TimeSpan)">
            <summary>
            Called for the draw loop.
            </summary>
            <param name="timeElapsed">Time since last draw.</param>
        </member>
        <member name="M:SadConsole.IScreen.Update(System.TimeSpan)">
            <summary>
            Called for the update loop.
            </summary>
            <param name="timeElapsed">Time since last draw.</param>
        </member>
        <member name="M:SadConsole.IScreen.OnCalculateRenderPosition">
            <summary>
            Called when the parent position changes.
            </summary>
        </member>
        <member name="M:SadConsole.MathHelper.Wrap(System.Single,System.Single,System.Single)">
            <summary>
            Wraps a value around the min and max.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="min">The minimum value before it transforms into the maximum.</param>
            <param name="max">The maximum value before it transforms into the minimum.</param>
            <returns>A new value if it falls outside the min/max range otherwise, the same value.</returns>
        </member>
        <member name="T:SadConsole.Readers.REXPaintImage">
            <summary>
            A RexPaint image.
            </summary>
        </member>
        <member name="T:SadConsole.Readers.REXPaintImage.Cell">
            <summary>
            A RexPaint layer cell.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaintImage.Cell.Character">
            <summary>
            The character for the cell.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaintImage.Cell.Foreground">
            <summary>
            The foreground color of the cell.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaintImage.Cell.Background">
            <summary>
            The background color of the cell.
            </summary>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Cell.IsTransparent">
            <summary>
            Returns true when the current color is considered transparent.
            </summary>
            <returns>True when transparent.</returns>
        </member>
        <member name="T:SadConsole.Readers.REXPaintImage.Color">
            <summary>
            A RexPaint color.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaintImage.Color.R">
            <summary>
            The red channel of the color.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaintImage.Color.G">
            <summary>
            The green channel of the color.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaintImage.Color.B">
            <summary>
            The blue channel of the color.
            </summary>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new RexPaint color with the specified RGB channels.
            </summary>
            <param name="r">The red channel of the color.</param>
            <param name="g">The green channel of the color.</param>
            <param name="b">The blue channel of the color.</param>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Color.Transparent">
            <summary>
            Returns the transparent color used by RexPaint: rgb(255, 0, 255).
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Version">
            <summary>
            The version of RexPaint that created this image.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Width">
            <summary>
            The width of the image.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Height">
            <summary>
            The height of the image.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.LayerCount">
            <summary>
            The total number of layers for this image.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Layers">
            <summary>
            A read-only collection of layers.
            </summary>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new RexPaint image.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Create">
            <summary>
            Creates a new layer for the image adding it to the end of the layer stack.
            </summary>
            <returns>A new layer.</returns>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Create(System.Int32)">
            <summary>
            Creates a new layer for the image and inserts it at the specified position (0-based).
            </summary>
            <param name="index">The position to create the new layer at.</param>
            <returns>A new layer.</returns>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Add(SadConsole.Readers.REXPaintImage.Layer)">
            <summary>
            Adds an existing layer (must be the same width/height) to the image.
            </summary>
            <param name="layer">The layer to add.</param>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Add(SadConsole.Readers.REXPaintImage.Layer,System.Int32)">
            <summary>
            Adds an existing layer (must be the same width/height) to the image and inserts it at the specified position (0-based).
            </summary>
            <param name="layer">The layer to add.</param>
            <param name="index">The position to add the layer.</param>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Remove(SadConsole.Readers.REXPaintImage.Layer)">
            <summary>
            Removes the specified layer.
            </summary>
            <param name="layer">The layer.</param>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.ToTextSurface">
            <summary>
            Converts this REXPaint image to a <see cref="!:Consoles.LayeredTextSurface"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Load(System.IO.Stream)">
            <summary>
            Loads a .xp RexPaint image from a GZip compressed stream.
            </summary>
            <param name="stream">The GZip stream to load.</param>
            <returns>The RexPaint image.</returns>
        </member>
        <member name="T:SadConsole.Readers.REXPaintImage.Layer">
            <summary>
            A layer of a RexPaint image.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Layer.Width">
            <summary>
            The width of the layer.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Layer.Height">
            <summary>
            The height of the layer.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Layer.Cells">
            <summary>
            Represents all cells of the layer.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Layer.Item(System.Int32,System.Int32)">
            <summary>
            Gets a cell by coordinates.
            </summary>
            <param name="x">The x (0-based) position of the cell.</param>
            <param name="y">The y (0-based) position of the cell.</param>
            <returns>The cell.</returns>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Layer.Item(System.Int32)">
            <summary>
            Gets a cell by index.
            </summary>
            <param name="index">The index of the cell.</param>
            <returns>The cell.</returns>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Layer.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new layer with the specified width and height.
            </summary>
            <param name="width">The width of the layer.</param>
            <param name="height">The height of the layer.</param>
        </member>
        <member name="T:SadConsole.Readers.TextureToSurfaceReader">
            <summary>
            Reads a texture to a cached surface. Used for animation.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.TextureToSurfaceReader.UseBlockMode">
            <summary>
            Renders the cells as blocks instead of characters.
            </summary>
        </member>
        <member name="M:SadConsole.Readers.TextureToSurfaceReader.#ctor(System.Int32,System.Int32,SadConsole.Font)">
            <summary>
            Creates a new instance of the class.
            </summary>
            <param name="pixelWidth">Width the source texture.</param>
            <param name="pixelHeight">Height of the source texture.</param>
            <param name="font">Font used for rendering.</param>
        </member>
        <member name="M:SadConsole.Readers.TextureToSurfaceReader.GetSurface(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Returns a surface with the specified image rendered to it as characters.
            </summary>
            <param name="image">The image to render.</param>
            <returns>The surface.</returns>
        </member>
        <member name="T:SadConsole.Renderers.ControlsConsoleRenderer">
            <summary>
            Draws a text surface to the screen.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.ControlsConsoleRenderer.Controls">
            <summary>
            Controls to render.
            </summary>
        </member>
        <member name="M:SadConsole.Renderers.ControlsConsoleRenderer.Render(SadConsole.Surfaces.ISurface,System.Boolean)">
            <summary>
            Renders a surface to the screen.
            </summary>
            <param name="surface">The surface to render.</param>
        </member>
        <member name="T:SadConsole.Renderers.ISurfaceRenderer">
            <summary>
            Represents the ability to render cell data to the screen.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.ISurfaceRenderer.BeforeRenderCallback">
            <summary>
            A method called when the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> has been created and transformed, but before any text characters are drawn.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.ISurfaceRenderer.BeforeRenderTintCallback">
            <summary>
            A method called when all text characters have been drawn but before any tinting has been applied.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.ISurfaceRenderer.AfterRenderCallback">
            <summary>
            A method called when all text characters have been drawn and any tinting has been applied.
            </summary>
        </member>
        <member name="M:SadConsole.Renderers.ISurfaceRenderer.Render(SadConsole.Surfaces.ISurface,System.Boolean)">
            <summary>
            Renders the cell data to the screen.
            </summary>
        </member>
        <member name="T:SadConsole.Renderers.LayeredSurfaceRenderer">
            <summary>
            Renders a <see cref="T:SadConsole.Surfaces.LayeredSurface"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Renderers.LayeredSurfaceRenderer.Render(SadConsole.Surfaces.ISurface,System.Boolean)">
            <summary>
            Only renders a <see cref="T:SadConsole.Surfaces.LayeredSurface"/>.
            </summary>
            <param name="surface">The <see cref="T:SadConsole.Surfaces.LayeredSurface"/> to render.</param>
            <param name="renderingMatrix">Rendering matrix used with the sprite batch.</param>
        </member>
        <member name="T:SadConsole.Renderers.SurfaceRenderer">
            <summary>
            Caches a text surface by rendering to a texture. That texture is then rendered at draw time. Reduces draw calls for a non-changing console.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.SurfaceRenderer.BeforeRenderCallback">
            <summary>
            A method called when the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> has been created and transformed, but before any text is drawn.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.SurfaceRenderer.BeforeRenderTintCallback">
            <summary>
            A method called when all text characters have been drawn but before any tinting has been applied.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.SurfaceRenderer.AfterRenderCallback">
            <summary>
            A method called when all text has been drawn and any tinting has been applied.
            </summary>
        </member>
        <member name="M:SadConsole.Renderers.SurfaceRenderer.Render(SadConsole.Surfaces.ISurface,System.Boolean)">
            <summary>
            Renders the cached surface from a previous call to the constructor or the <see cref="!:Update(ISurfaceRendered)"/> method.
            </summary>
            <param name="surface">Used only for tinting.</param>
            <param name="renderingMatrix">Display matrix for the rendered console.</param>
        </member>
        <member name="T:SadConsole.Renderers.WindowRenderer">
            <summary>
            Renders a popup window taking into account the modal setting.
            </summary>
        </member>
        <member name="M:SadConsole.Renderers.WindowRenderer.#ctor">
            <summary>
            Creates a new renderer.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.WindowRenderer.IsModal">
            <summary>
            Indicates the window will be drawn modal (discolored background rect for the game window)
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.WindowRenderer.ModalTint">
            <summary>
            The color of the modal background.
            </summary>
        </member>
        <member name="M:SadConsole.Renderers.WindowRenderer.Render(SadConsole.Surfaces.ISurface,System.Boolean)">
            <summary>
            Renders a 
            </summary>
            <param name="surface"></param>
            <param name="renderingMatrix"></param>
        </member>
        <member name="T:SadConsole.Screen">
            <summary>
            A basic implementation of <see cref="T:SadConsole.IScreen"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Screen.calculatedPosition">
            <summary>
            Position to render the screen at based on <see cref="P:SadConsole.Screen.Position"/> all parents.
            </summary>
        </member>
        <member name="F:SadConsole.Screen.parentScreen">
            <summary>
            The parent screen.
            </summary>
        </member>
        <member name="F:SadConsole.Screen.position">
            <summary>
            The position of the console.
            </summary>
        </member>
        <member name="P:SadConsole.Screen.Position">
            <summary>
            The position of the console.
            </summary>
        </member>
        <member name="P:SadConsole.Screen.CalculatedPosition">
            <summary>
            The position of this screen relative to the parents.
            </summary>
        </member>
        <member name="P:SadConsole.Screen.Children">
            <summary>
            Child screen objects.
            </summary>
        </member>
        <member name="P:SadConsole.Screen.Parent">
            <summary>
            Gets or sets the Parent screen.
            </summary>
        </member>
        <member name="P:SadConsole.Screen.IsVisible">
            <summary>
            Indicates this screen object is visible and should process <see cref="M:SadConsole.Screen.Draw(System.TimeSpan)"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Screen.IsPaused">
            <summary>
            Indicates the screen object should not process <see cref="M:SadConsole.Screen.Update(System.TimeSpan)"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Screen.#ctor">
            <summary>
            Creates a new screen.
            </summary>
        </member>
        <member name="M:SadConsole.Screen.Draw(System.TimeSpan)">
            <summary>
            Draws all children.
            </summary>
            <param name="timeElapsed">Time since the last call.</param>
        </member>
        <member name="M:SadConsole.Screen.Update(System.TimeSpan)">
            <summary>
            Updates all children.
            </summary>
            <param name="timeElapsed">Time since the last call.</param>
        </member>
        <member name="M:SadConsole.Screen.OnCalculateRenderPosition">
            <summary>
            Called when the parent position changes.
            </summary>
        </member>
        <member name="T:SadConsole.ScreenCollection">
            <summary>
            Manages the parent and children relationship for <see cref="T:SadConsole.IScreen"/>.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenCollection.Clear">
            <summary>
            Removes all consoles.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenCollection.Contains(SadConsole.IScreen)">
            <summary>
            Returns true if this console list contains the specified console.
            </summary>
            <param name="console">The console to search for.</param>
            <returns></returns>
        </member>
        <member name="T:SadConsole.Serializer">
            <summary>
            Common serialization tasks for SadConsole.
            </summary>
        </member>
        <member name="P:SadConsole.Serializer.KnownTypes">
            <summary>
            The types commonly used when sesrializing a basic console.
            </summary>
        </member>
        <member name="M:SadConsole.Serializer.Save``1(``0,System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Serializes the <paramref name="instance"/> instance to the specified file.
            </summary>
            <typeparam name="T">Type of object to serialize</typeparam>
            <param name="instance">The object to serialize.</param>
            <param name="file">The file to save the object to.</param>
            <param name="knownTypes">Optional list of known types for serialization.</param>
        </member>
        <member name="M:SadConsole.Serializer.Load``1(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Deserializes a new instance of <typeparamref name="T"/> from the specified file.
            </summary>
            <typeparam name="T">The type of object to deserialize.</typeparam>
            <param name="file">The file to load from.</param>
            <param name="knownTypes">Known types used during deserialization.</param>
            <returns>A new object instance.</returns>
        </member>
        <member name="F:SadConsole.Settings.ClearColor">
            <summary>
            The color to automatically clear the device with.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.ResizeMode">
            <summary>
            The type of resizing options for the window.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.AllowWindowResize">
            <summary>
            Allow the user to resize the window. Must be set before the game is created.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.UnlimitedFPS">
            <summary>
            Unlimited FPS when rendering (normally limited to 60fps). Must be set before the game is created.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.DoDraw">
            <summary>
            When true, indicates that <see cref="M:SadConsole.Game.SadConsoleGameComponent.Draw(Microsoft.Xna.Framework.GameTime)"/> will run.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.DoFinalDraw">
            <summary>
            When true, indicates that <see cref="M:SadConsole.Game.SadConsoleGameComponent.Draw(Microsoft.Xna.Framework.GameTime)"/> will render to the screen at the end.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.DoUpdate">
            <summary>
            When true, indicates that <see cref="M:SadConsole.Game.SadConsoleGameComponent.Update(Microsoft.Xna.Framework.GameTime)"/> will run.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.GraphicsProfile">
            <summary>
            The <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsProfile"/> value to use.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.UseHardwareFullScreen">
            <summary>
            Tells MonoGame to use a full screen resolution change instead of soft (quick) full screen. Must be set before the game is created.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.WindowMinimumSize">
            <summary>
            When not set to (0,0) this property specifies the minimum size of the game window in pixels.
            </summary>
        </member>
        <member name="T:SadConsole.Settings.Input">
            <summary>
            Settings related to input.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.Input.ProcessMouseOffscreen">
            <summary>
            Not currently used
            </summary>
        </member>
        <member name="F:SadConsole.Settings.Input.DoMouse">
            <summary>
            When true, the <see cref="T:SadConsole.Game"/> object updates the mouse state every update frame.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.Input.DoKeyboard">
            <summary>
            When true, the <see cref="T:SadConsole.Game"/> object updates the keyboard state every update frame.
            </summary>
        </member>
        <member name="T:SadConsole.Settings.WindowResizeOptions">
            <summary>
            Resize modes for the final SadConsole render pass.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.WindowResizeOptions.Stretch">
            <summary>
            Stretches the <see cref="F:SadConsole.Global.RenderOutput"/> to fit the window.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.WindowResizeOptions.Center">
            <summary>
            Centers <see cref="F:SadConsole.Global.RenderOutput"/> in the window.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.WindowResizeOptions.Scale">
            <summary>
            Scales <see cref="F:SadConsole.Global.RenderOutput"/> to fit the window as best as possible while maintaining a good picture.
            </summary>
        </member>
        <member name="M:SadConsole.Shapes.Box.SetRegion(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            
            </summary>
            <param name="rectangle"></param>
        </member>
        <member name="M:SadConsole.Shapes.Box.#ctor(System.Int32[],System.Int32,System.Int32,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Boolean,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a box from the specified <paramref name="lineStyle"/>.
            </summary>
            <param name="lineStyle">The array of line styles indexed by <see cref="T:SadConsole.Surfaces.SurfaceEditor.LineRoadIndex"/>.</param>
            <param name="width">The width of the box.</param>
            <param name="height">The height of the box.</param>
            <param name="foreground">The foreground color of the box edges.</param>
            <param name="background">The background color of the box edges.</param>
            <param name="fill">When true fills the inside of the box with the <paramref name="foreground"/> and <paramref name="fillColor"/> as the background.</param>
            <param name="fillColor">The background color to fill the box with.</param>
        </member>
        <member name="M:SadConsole.Shapes.Box.Thick">
            <summary>
            Returns a box made up of double lines. Glyphs: 186, 205, 201, 187, 188, 200.
            </summary>
            <returns>A new 4x4 box object.</returns>
        </member>
        <member name="M:SadConsole.Shapes.Box.Thin">
            <summary>
            Returns a box made up of single lines. Glyphs: 179, 196, 218, 191, 217, 192.
            </summary>
            <returns>A new 4x4 box object.</returns>
        </member>
        <member name="T:SadConsole.Shapes.Line">
            <summary>
            Draws a line.
            </summary>
        </member>
        <member name="P:SadConsole.Shapes.Line.StartingLocation">
            <summary>
            Gets or sets the starting point of the line.
            </summary>
        </member>
        <member name="P:SadConsole.Shapes.Line.EndingLocation">
            <summary>
            Gets or sets the ending point of the line.
            </summary>
        </member>
        <member name="P:SadConsole.Shapes.Line.StartingCell">
            <summary>
            Gets or sets the appearance of the starting cell in the line.
            </summary>
        </member>
        <member name="P:SadConsole.Shapes.Line.EndingCell">
            <summary>
            Gets or sets the appearance of the ending cell in the line.
            </summary>
        </member>
        <member name="P:SadConsole.Shapes.Line.Cell">
            <summary>
            Gets or sets the appearance of a cell in the line.
            </summary>
        </member>
        <member name="P:SadConsole.Shapes.Line.UseStartingCell">
            <summary>
            When true, uses the <see cref="P:SadConsole.Shapes.Line.StartingCell"/> for the starting cell instead of <see cref="P:SadConsole.Shapes.Line.Cell"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Shapes.Line.UseEndingCell">
            <summary>
            When true, uses the <see cref="P:SadConsole.Shapes.Line.EndingCell"/> for the starting cell instead of <see cref="P:SadConsole.Shapes.Line.Cell"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Shapes.Line.#ctor">
            <summary>
            Creates a new instance of the line class with default values.
            </summary>
        </member>
        <member name="M:SadConsole.Shapes.Line.Draw(SadConsole.Surfaces.SurfaceEditor)">
            <summary>
            Draws the line shape.
            </summary>
            <param name="surface">The cell surface to draw on.</param>
        </member>
        <member name="M:SadConsole.Shapes.Line.Draw(System.Collections.Generic.IEnumerable{SadConsole.Cell})">
            <summary>
            Draws the line shape across all of the cells. Will not draw the effect. Must be done outside of this method.
            </summary>
            <param name="cells">The cells to draw on.</param>
        </member>
        <member name="M:SadConsole.Shapes.Line.GetCells(SadConsole.Surfaces.ISurface)">
            <summary>
            Determines the cells that would be drawn on and returns them instead of drawing the line.
            </summary>
            <param name="surface">The surface to get the cells from.</param>
            <returns>The cells the line would have drawn on.</returns>
        </member>
        <member name="T:SadConsole.StringParser.CommandTypes">
            <summary>
            Command type of a <see cref="T:SadConsole.StringParser.ParseCommandBase"/>.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Foreground">
            <summary>
            Command should be added to the <see cref="F:SadConsole.StringParser.ParseCommandStacks.Foreground"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Background">
            <summary>
            Command should be added to the <see cref="F:SadConsole.StringParser.ParseCommandStacks.Background"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Glyph">
            <summary>
            Command should be added to the <see cref="F:SadConsole.StringParser.ParseCommandStacks.Glyph"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Mirror">
            <summary>
            Command should be added to the <see cref="F:SadConsole.StringParser.ParseCommandStacks.Mirror"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Effect">
            <summary>
            Command should be added to the <see cref="F:SadConsole.StringParser.ParseCommandStacks.Effect"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.PureCommand">
            <summary>
            Command runs on creation and is not added to anything in <see cref="T:SadConsole.StringParser.ParseCommandStacks"/>.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Invalid">
            <summary>
            Command is invalid and should not be processed at all.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandBase">
            <summary>
            Base class for a string processor behavior.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.ParseCommandBase.CommandType">
            <summary>
            Type of command.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandBase.Build(SadConsole.ColoredGlyph@,SadConsole.ColoredGlyph[],System.Int32,SadConsole.Surfaces.ISurface,SadConsole.Surfaces.SurfaceEditor,System.Int32@,System.String,SadConsole.StringParser.ParseCommandStacks)">
            <summary>
            Builds a glyph.
            </summary>
            <param name="glyphState">The current glyph being built.</param>
            <param name="glyphString">The current string of glyphs that has been processed until now.</param>
            <param name="surfaceIndex">Where on the surface this flyph will appear.</param>
            <param name="surface">The surface associated with the glyph.</param>
            <param name="editor">The editor associated with the surface.</param>
            <param name="stringIndex">Where in the original string this glyph is from.</param>
            <param name="processedString">The entire string being processed.</param>
            <param name="commandStack">The state of commands.</param>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandBlink">
            <summary>
            Blinks characters.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandSetGlyph">
            <summary>
            Prints a glyph.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandGradient">
            <summary>
            Recolors a glyph.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandMirror">
            <summary>
            Sets the mirror of a glyph.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandRecolor">
            <summary>
            Recolors a glyph.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandStacks">
            <summary>
            A list of behaviors applied as a string is processed.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandStacks.AddSafe(SadConsole.StringParser.ParseCommandBase)">
            <summary>
            Adds a behavior to the <see cref="F:SadConsole.StringParser.ParseCommandStacks.All"/> collection and the collection based on the <see cref="F:SadConsole.StringParser.ParseCommandBase.CommandType"/> type.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandStacks.RemoveSafe(SadConsole.StringParser.ParseCommandBase)">
            <summary>
            Removes a command from the appropriate command stack and from the <see cref="F:SadConsole.StringParser.ParseCommandStacks.All"/> stack.
            </summary>
            <param name="command">The command to remove</param>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandUndo">
            <summary>
            Pops a behavior off of a <see cref="T:SadConsole.StringParser.ParseCommandStacks"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.ColorAnsi">
            <summary>
            Classic 16 ansi color values.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.Black">
            <summary>
            The black ansi color (0, 0, 0).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.Red">
            <summary>
            The Red ansi color (170, 0, 0).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.Green">
            <summary>
            The Green ansi color 0, 170, 0).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.Yellow">
            <summary>
            The Yellow ansi color (170, 85, 0).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.Blue">
            <summary>
            The Blue ansi color (0, 0, 170).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.Magenta">
            <summary>
            The Magenta ansi color (170, 0, 170).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.Cyan">
            <summary>
            The Cyan ansi color (0, 170, 170).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.White">
            <summary>
            The White ansi color (170, 170, 170).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.BlackBright">
            <summary>
            The BlackBright ansi color (85, 85, 85).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.RedBright">
            <summary>
            The RedBright ansi color (255, 85, 85).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.GreenBright">
            <summary>
            The GreenBright ansi color (85, 255, 85).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.YellowBright">
            <summary>
            The YellowBright ansi color (255, 255, 85).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.BlueBright">
            <summary>
            The BlueBright ansi color (85, 85, 255).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.MagentaBright">
            <summary>
            The MagentaBright ansi color (255, 85, 255).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.CyanBright">
            <summary>
            The CyanBright ansi color (85, 255, 255).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.WhiteBright">
            <summary>
            The WhiteBright ansi color (255, 255, 255).
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.ColorExtensions">
            <summary>
            Various extension methods to <see cref="T:Microsoft.Xna.Framework.Color"/> class.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorExtensions.ColorMappings">
            <summary>
            Custom color mappings for the <see cref="M:Microsoft.Xna.Framework.ColorExtensions.FromParser(Microsoft.Xna.Framework.Color,System.String,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)"/> method.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.ToInteger(Microsoft.Xna.Framework.Color)">
            <summary>
            Wrapper for <see cref="P:Microsoft.Xna.Framework.Color.PackedValue"/>.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.LerpSteps(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Int32)">
            <summary>
            Creates an array of colors that includes the <paramref name="color"/> and <paramref name="endingColor"/> and <paramref name="steps"/> of colors between them.
            </summary>
            <param name="color">The starting color which will be at index 0 in the array.</param>
            <param name="endingColor">The ending color which will be at index `steps - 1` in the array.</param>
            <param name="steps">The gradient steps in the array which uses <see cref="M:Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Single)"/>.</param>
            <returns>An array of colors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.SetHSL(Microsoft.Xna.Framework.Color,System.Single,System.Single,System.Single)">
            <summary>
            Sets the color values based on HSL instead of RGB.
            </summary>
            <param name="color">The color to change.</param>
            <param name="h">The hue amount.</param>
            <param name="s">The saturation amount.</param>
            <param name="l">The luminance amount.</param>
            <remarks>Taken from http://www.easyrgb.com/index.php?X=MATH&amp;H=19#text19 </remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.GetRandomColor(Microsoft.Xna.Framework.Color,System.Random)">
            <summary>
            Gets a random color.
            </summary>
            <param name="color">The color object to start with. Will be overridden.</param>
            <param name="random">A random object to get numbers from.</param>
            <returns>A new color.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.RedOnly(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a new Color using only the Red value of this color.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with only the red channel set.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.GreenOnly(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a new Color using only the Green value of this color.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with only the green channel set.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.BlueOnly(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a new Color using only the Blue value of this color.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with only the blue channel set.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.AlphaOnly(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a new Color using only the Alpha value of this color.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with only the alpha channel set.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.ClearRed(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a new color with the red channel set to 0.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the red channel cleared.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.ClearGreen(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a new color with the green channel set to 0.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the green channel cleared.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.ClearBlue(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a new color with the blue channel set to 0.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the blue channel cleared.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.ClearAlpha(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a new color with the alpha channel set to 0.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the alpha channel cleared.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.FillRed(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a new color with the red channel set to 255.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the red channel fully set.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.FillGreen(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a new color with the green channel set to 255.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the green channel fully set.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.FillBlue(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a new color with the blue channel set to 255.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the blue channel fully set.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.FillAlpha(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a new color with the alpha channel set to 255.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the alpha channel fully set.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.GetLuma(Microsoft.Xna.Framework.Color)">
            <summary>
            Gets the luma of an existing color.
            </summary>
            <param name="color">The color to calculate the luma from.</param>
            <returns>A value based on this code: (color.R + color.R + color.B + color.G + color.G + color.G) / 6f</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.GetBrightness(Microsoft.Xna.Framework.Color)">
            <summary>
            Gets the brightness of a color.
            </summary>
            <param name="color">The color to process.</param>
            <returns>The brightness value.</returns>
            <remarks>Taken from the mono source code.</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.GetSaturation(Microsoft.Xna.Framework.Color)">
            <summary>
            Gets the saturation of a color.
            </summary>
            <param name="color">The color to process.</param>
            <returns>The saturation value.</returns>
            <remarks>Taken from the mono source code.</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.GetHue(Microsoft.Xna.Framework.Color)">
            <summary>
            Gets the hue of a color.
            </summary>
            <param name="color">The color to process.</param>
            <returns>The hue value.</returns>
            <remarks>Taken from the mono source code.</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.ToParser(Microsoft.Xna.Framework.Color)">
            <summary>
            Converts a color to the format used by <see cref="!:SadConsole.ParseCommandRecolor"/> command.
            </summary>
            <param name="color">The color to convert.</param>
            <returns>A string in this format R,G,B,A so for <see cref="P:Microsoft.Xna.Framework.Color.Green"/> you would get <code>0,128,0,255</code>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.FromParser(Microsoft.Xna.Framework.Color,System.String,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets a color in the format of <see cref="!:SadConsole.ParseCommandRecolor"/>.
            </summary>
            <param name="color"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.ColorGradient">
            <summary>
            Represents a gradient with multiple color stops.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.ColorGradient.Stops">
            <summary>
            The color stops that define the gradient.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorGradient.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Color},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Creates a new color gradient with the defined colors and stops.
            </summary>
            <param name="colors">The colors with the gradient.</param>
            <param name="stops">The gradient stops where the colors are used.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorGradient.#ctor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a new color gradient with only two colors, the first at the start, and the second at the end.
            </summary>
            <param name="startingColor">The starting color of the gradient.</param>
            <param name="endingColor">The ending color of the gradient.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorGradient.#ctor(Microsoft.Xna.Framework.Color[])">
            <summary>
            Creates a new color gradient, evenly spacing them out. At least one color must be provided.
            </summary>
            <param name="colors">The colors to create a gradient from.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorGradient.GetEnumerator">
            <summary>
            Gets an enumerator with all of the gradient stops.
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorGradient.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator with all of the gradient stops.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorGradient.ToColoredString(System.String)">
            <summary>
            Creates a <see cref="T:SadConsole.ColoredString"/> object using the current gradient.
            </summary>
            <param name="text">The text to use for the colored string.</param>
            <returns>A new colored string object.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorGradient.ToColorArray(System.Int32)">
            <summary>
            Gets an array of colors based from the gradient.
            </summary>
            <param name="count">The amount of colors to produce.</param>
            <returns>An array of colors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorGradient.Lerp(System.Single)">
            <summary>
            Returns a color from this gradient at the specified lerp value.
            </summary>
            <param name="amount">The lerp amount.</param>
            <returns>A color.</returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.ColorGradientStop">
            <summary>
            A gradient stop. Defines a color and where it is located within the gradient.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorGradientStop.Color">
            <summary>
            The color.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorGradientStop.Stop">
            <summary>
            The color stop in the gradiant this applies to.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.PointExtensions.ConsoleLocationToPixel(Microsoft.Xna.Framework.Point,System.Int32,System.Int32)">
            <summary>
            Translates a console cell position to where it appears on the screen in pixels.
            </summary>
            <param name="point">The current cell position.</param>
            <param name="cellWidth">The width of a cell in pixels.</param>
            <param name="cellHeight">The height of a cell in pixels.</param>
            <returns>The pixel position of the top-left of the cell.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.PointExtensions.ConsoleLocationToPixel(Microsoft.Xna.Framework.Point,SadConsole.Font)">
            <summary>
            Translates a console cell position to where it appears on the screen in pixels.
            </summary>
            <param name="point">The current cell position.</param>
            <param name="font">The font to use in calculating the position.</param>
            <returns>The pixel position of the top-left of the cell.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.PointExtensions.PixelLocationToConsole(Microsoft.Xna.Framework.Point,System.Int32,System.Int32)">
            <summary>
            Translates a pixel to where it appears on a console cell.
            </summary>
            <param name="point">The current world position.</param>
            <param name="cellWidth">The width of a cell in pixels.</param>
            <param name="cellHeight">The height of a cell in pixels.</param>
            <returns>The cell position on the screen.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.PointExtensions.PixelLocationToConsole(Microsoft.Xna.Framework.Point,SadConsole.Font)">
            <summary>
            Translates a pixel to where it appears on a console cell.
            </summary>
            <param name="point">The current world position.</param>
            <param name="font">The font to use in calculating the position.</param>
            <returns>The cell position on the screen.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.PointExtensions.ToIndex(Microsoft.Xna.Framework.Point,System.Int32)">
            <summary>
            Translates an x,y position to an array index.
            </summary>
            <param name="point">The position.</param>
            <param name="rowWidth">How many columns in a row.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.PointExtensions.TranslateFont(Microsoft.Xna.Framework.Point,SadConsole.Font,SadConsole.Font)">
            <summary>
            Gets the cell coordinates of the <paramref name="targetFont"/> based on a cell in the <paramref name="sourceFont"/>.
            </summary>
            <param name="point">The position of the cell in the <paramref name="sourceFont"/>.</param>
            <param name="sourceFont">The source font translating from.</param>
            <param name="targetFont">The target font translating to.</param>
            <returns>The position of the cell in the <paramref name="targetFont"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.PointExtensions.ToPositionMatrix(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Boolean)">
            <summary>
            Creates a position matrix (in pixels) based on the position of a cell.
            </summary>
            <param name="position">The cell position.</param>
            <param name="cellSize">The size of the cell in pixels.</param>
            <param name="absolutePositioning">When true, indicates that the <paramref name="position"/> indicates pixels, not cell coordinates.</param>
            <returns>A matrix for rendering.</returns>
        </member>
        <member name="T:System.StringExtensions">
            <summary>
            Helpers for strings.
            </summary>
        </member>
        <member name="M:System.StringExtensions.Align(System.String,System.Windows.HorizontalAlignment,System.Int32)">
            <summary>
            Aligns a string given a total character width and alignment style. Fills in the extra space with the space character.
            </summary>
            <param name="value">The current string.</param>
            <param name="alignment">The horizontal alignment.</param>
            <param name="totalWidth">The total width of the new string.</param>
            <returns>A new string instance.</returns>
        </member>
        <member name="M:System.StringExtensions.Align(System.String,System.Windows.HorizontalAlignment,System.Int32,System.Char)">
            <summary>
            Aligns a string given a total character width and alignment style.
            </summary>
            <param name="value">The current string.</param>
            <param name="alignment">The horizontal alignment.</param>
            <param name="totalWidth">The total width of the new string.</param>
            <param name="fillCharacter">The character to use to fill in the extra spaces after alignment.</param>
            <returns>A new string instance.</returns>
        </member>
        <member name="M:System.StringExtensions.CreateColored(System.String,System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Graphics.SpriteEffects})">
            <summary>
            Creates a <see cref="T:SadConsole.ColoredString"/> object from an existing string with the specified foreground and background, setting the ignore properties if needed.
            </summary>
            <param name="value">The current string.</param>
            <param name="foreground">The foreground color. If null, <see cref="F:SadConsole.ColoredString.IgnoreForeground"/> will be set.</param>
            <param name="background">The background color. If null, <see cref="F:SadConsole.ColoredString.IgnoreBackground"/> will be set.</param>
            <param name="mirror">The mirror setting. If null, <see cref="F:SadConsole.ColoredString.IgnoreMirror"/> will be set.</param>
            <returns>A <see cref="T:SadConsole.ColoredString"/> object instace.</returns>
        </member>
        <member name="M:System.StringExtensions.CreateGradient(System.String,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a <see cref="T:SadConsole.ColoredString"/> object from an existing string with the specified foreground gradient and cell effect. 
            </summary>
            <param name="value">The current string.</param>
            <param name="startingForeground">The starting foreground color to blend.</param>
            <param name="endingForeground">The ending foreground color to blend.</param>
            <returns>A <see cref="T:SadConsole.ColoredString"/> object instace.</returns>
        </member>
        <member name="M:System.StringExtensions.CreateGradient(System.String,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a <see cref="T:SadConsole.ColoredString"/> object from an existing string with the specified foreground gradient, background gradient, and cell effect. 
            </summary>
            <param name="value">The current string.</param>
            <param name="startingForeground">The starting foreground color to blend.</param>
            <param name="endingForeground">The ending foreground color to blend.</param>
            <param name="startingBackground">The starting background color to blend.</param>
            <param name="endingBackground">The ending background color to blend.</param>
            <returns>A <see cref="T:SadConsole.ColoredString"/> object instace.</returns>
        </member>
        <member name="M:System.StringExtensions.ToBool(System.String)">
            <summary>
            Converts a string to a boolean when it is "0", "1", "true", or "false".
            </summary>
            <param name="item">The string to convert</param>
            <returns>The converted boolean value, otherwise false.</returns>
        </member>
    </members>
</doc>
